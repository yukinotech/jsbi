{"version":3,"file":"jsbi-cjs.js","sources":["../tsc-out/jsbi.mjs"],"sourcesContent":["// Copyright 2018 Google Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the “License”);\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n// <https://apache.org/licenses/LICENSE-2.0>.\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an “AS IS” BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nclass JSBI extends Array {\r\n    constructor(length, sign) {\r\n        super(length);\r\n        this.sign = sign;\r\n        // Explicitly set the prototype as per\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, JSBI.prototype);\r\n        // 相当于 this.__proto__ = JSBI.prototype\r\n        // 因为是拓展原生Array，避免浏览器兼容性问题，强制指明 this.__proto__ = JSBI.prototype\r\n        if (length > JSBI.__kMaxLength) {\r\n            throw new RangeError('Maximum BigInt size exceeded');\r\n        }\r\n    }\r\n    static BigInt(arg) {\r\n        if (typeof arg === 'number') {\r\n            if (arg === 0)\r\n                return JSBI.__zero();\r\n            if (JSBI.__isOneDigitInt(arg)) {\r\n                if (arg < 0) {\r\n                    return JSBI.__oneDigit(-arg, true);\r\n                }\r\n                return JSBI.__oneDigit(arg, false);\r\n            }\r\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\r\n                throw new RangeError('The number ' +\r\n                    arg +\r\n                    ' cannot be converted to ' +\r\n                    'BigInt because it is not an integer');\r\n            }\r\n            return JSBI.__fromDouble(arg);\r\n        }\r\n        else if (typeof arg === 'string') {\r\n            const result = JSBI.__fromString(arg);\r\n            if (result === null) {\r\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\r\n            }\r\n            return result;\r\n        }\r\n        else if (typeof arg === 'boolean') {\r\n            if (arg === true) {\r\n                return JSBI.__oneDigit(1, false);\r\n            }\r\n            return JSBI.__zero();\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            if (arg.constructor === JSBI)\r\n                return arg;\r\n            const primitive = JSBI.__toPrimitive(arg);\r\n            return JSBI.BigInt(primitive);\r\n        }\r\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\r\n    }\r\n    toDebugString() {\r\n        const result = ['BigInt['];\r\n        for (const digit of this) {\r\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\r\n        }\r\n        result.push(']');\r\n        return result.join('');\r\n    }\r\n    toString(radix = 10) {\r\n        if (radix < 2 || radix > 36) {\r\n            throw new RangeError('toString() radix argument must be between 2 and 36');\r\n        }\r\n        if (this.length === 0)\r\n            return '0';\r\n        if ((radix & (radix - 1)) === 0) {\r\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\r\n        }\r\n        return JSBI.__toStringGeneric(this, radix, false);\r\n    }\r\n    valueOf() {\r\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\r\n    }\r\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\r\n    // TODO: add more tests\r\n    static toNumber(x) {\r\n        const xLength = x.length;\r\n        if (xLength === 0)\r\n            return 0;\r\n        if (xLength === 1) {\r\n            const value = x.__unsignedDigit(0);\r\n            return x.sign ? -value : value;\r\n        }\r\n        const xMsd = x.__digit(xLength - 1);\r\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\r\n        const xBitLength = xLength * 30 - msdLeadingZeros;\r\n        if (xBitLength > 1024)\r\n            return x.sign ? -Infinity : Infinity;\r\n        let exponent = xBitLength - 1;\r\n        let currentDigit = xMsd;\r\n        let digitIndex = xLength - 1;\r\n        const shift = msdLeadingZeros + 3;\r\n        let mantissaHigh = shift === 32 ? 0 : currentDigit << shift;\r\n        mantissaHigh >>>= 12;\r\n        const mantissaHighBitsUnset = shift - 12;\r\n        let mantissaLow = shift >= 12 ? 0 : currentDigit << (20 + shift);\r\n        let mantissaLowBitsUnset = 20 + shift;\r\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\r\n            digitIndex--;\r\n            currentDigit = x.__digit(digitIndex);\r\n            mantissaHigh |= currentDigit >>> (30 - mantissaHighBitsUnset);\r\n            mantissaLow = currentDigit << (mantissaHighBitsUnset + 2);\r\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\r\n        }\r\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\r\n            digitIndex--;\r\n            currentDigit = x.__digit(digitIndex);\r\n            if (mantissaLowBitsUnset >= 30) {\r\n                mantissaLow |= currentDigit << (mantissaLowBitsUnset - 30);\r\n            }\r\n            else {\r\n                mantissaLow |= currentDigit >>> (30 - mantissaLowBitsUnset);\r\n            }\r\n            mantissaLowBitsUnset -= 30;\r\n        }\r\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\r\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\r\n            mantissaLow = (mantissaLow + 1) >>> 0;\r\n            if (mantissaLow === 0) {\r\n                // Incrementing mantissaLow overflowed.\r\n                mantissaHigh++;\r\n                if (mantissaHigh >>> 20 !== 0) {\r\n                    // Incrementing mantissaHigh overflowed.\r\n                    mantissaHigh = 0;\r\n                    exponent++;\r\n                    if (exponent > 1023) {\r\n                        // Incrementing the exponent overflowed.\r\n                        return x.sign ? -Infinity : Infinity;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const signBit = x.sign ? 1 << 31 : 0;\r\n        exponent = (exponent + 0x3ff) << 20;\r\n        JSBI.__kBitConversionInts[1] = signBit | exponent | mantissaHigh;\r\n        JSBI.__kBitConversionInts[0] = mantissaLow;\r\n        return JSBI.__kBitConversionDouble[0];\r\n    }\r\n    // Operations.\r\n    static unaryMinus(x) {\r\n        if (x.length === 0)\r\n            return x;\r\n        const result = x.__copy();\r\n        result.sign = !x.sign;\r\n        return result;\r\n    }\r\n    static bitwiseNot(x) {\r\n        if (x.sign) {\r\n            // ~(-x) == ~(~(x-1)) == x-1\r\n            return JSBI.__absoluteSubOne(x).__trim();\r\n        }\r\n        // ~x == -x-1 == -(x+1)\r\n        return JSBI.__absoluteAddOne(x, true);\r\n    }\r\n    static exponentiate(x, y) {\r\n        if (y.sign) {\r\n            throw new RangeError('Exponent must be positive');\r\n        }\r\n        if (y.length === 0) {\r\n            return JSBI.__oneDigit(1, false);\r\n        }\r\n        if (x.length === 0)\r\n            return x;\r\n        if (x.length === 1 && x.__digit(0) === 1) {\r\n            // (-1) ** even_number == 1.\r\n            if (x.sign && (y.__digit(0) & 1) === 0) {\r\n                return JSBI.unaryMinus(x);\r\n            }\r\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\r\n            return x;\r\n        }\r\n        // For all bases >= 2, very large exponents would lead to unrepresentable\r\n        // results.\r\n        if (y.length > 1)\r\n            throw new RangeError('BigInt too big');\r\n        let expValue = y.__unsignedDigit(0);\r\n        if (expValue === 1)\r\n            return x;\r\n        if (expValue >= JSBI.__kMaxLengthBits) {\r\n            throw new RangeError('BigInt too big');\r\n        }\r\n        if (x.length === 1 && x.__digit(0) === 2) {\r\n            // Fast path for 2^n.\r\n            const neededDigits = 1 + ((expValue / 30) | 0);\r\n            const sign = x.sign && (expValue & 1) !== 0;\r\n            const result = new JSBI(neededDigits, sign);\r\n            result.__initializeDigits();\r\n            // All bits are zero. Now set the n-th bit.\r\n            const msd = 1 << expValue % 30;\r\n            result.__setDigit(neededDigits - 1, msd);\r\n            return result;\r\n        }\r\n        let result = null;\r\n        let runningSquare = x;\r\n        // This implicitly sets the result's sign correctly.\r\n        if ((expValue & 1) !== 0)\r\n            result = x;\r\n        expValue >>= 1;\r\n        for (; expValue !== 0; expValue >>= 1) {\r\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\r\n            if ((expValue & 1) !== 0) {\r\n                if (result === null) {\r\n                    result = runningSquare;\r\n                }\r\n                else {\r\n                    result = JSBI.multiply(result, runningSquare);\r\n                }\r\n            }\r\n        }\r\n        // TODO see if there's a way for tsc to infer this will always happen?\r\n        return result;\r\n    }\r\n    static multiply(x, y) {\r\n        if (x.length === 0)\r\n            return x;\r\n        if (y.length === 0)\r\n            return y;\r\n        let resultLength = x.length + y.length;\r\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\r\n            resultLength--;\r\n        }\r\n        const result = new JSBI(resultLength, x.sign !== y.sign);\r\n        result.__initializeDigits();\r\n        for (let i = 0; i < x.length; i++) {\r\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static divide(x, y) {\r\n        if (y.length === 0)\r\n            throw new RangeError('Division by zero');\r\n        if (JSBI.__absoluteCompare(x, y) < 0)\r\n            return JSBI.__zero();\r\n        const resultSign = x.sign !== y.sign;\r\n        const divisor = y.__unsignedDigit(0);\r\n        let quotient;\r\n        if (y.length === 1 && divisor <= 0x7fff) {\r\n            if (divisor === 1) {\r\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\r\n            }\r\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\r\n        }\r\n        else {\r\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\r\n        }\r\n        quotient.sign = resultSign;\r\n        return quotient.__trim();\r\n    }\r\n    static remainder(x, y) {\r\n        if (y.length === 0)\r\n            throw new RangeError('Division by zero');\r\n        if (JSBI.__absoluteCompare(x, y) < 0)\r\n            return x;\r\n        const divisor = y.__unsignedDigit(0);\r\n        if (y.length === 1 && divisor <= 0x7fff) {\r\n            if (divisor === 1)\r\n                return JSBI.__zero();\r\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\r\n            if (remainderDigit === 0)\r\n                return JSBI.__zero();\r\n            return JSBI.__oneDigit(remainderDigit, x.sign);\r\n        }\r\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\r\n        remainder.sign = x.sign;\r\n        return remainder.__trim();\r\n    }\r\n    static add(x, y) {\r\n        const sign = x.sign;\r\n        if (sign === y.sign) {\r\n            // x + y == x + y\r\n            // -x + -y == -(x + y)\r\n            return JSBI.__absoluteAdd(x, y, sign);\r\n        }\r\n        // x + -y == x - y == -(y - x)\r\n        // -x + y == y - x == -(x - y)\r\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\r\n            return JSBI.__absoluteSub(x, y, sign);\r\n        }\r\n        return JSBI.__absoluteSub(y, x, !sign);\r\n    }\r\n    static subtract(x, y) {\r\n        const sign = x.sign;\r\n        if (sign !== y.sign) {\r\n            // x - (-y) == x + y\r\n            // (-x) - y == -(x + y)\r\n            return JSBI.__absoluteAdd(x, y, sign);\r\n        }\r\n        // x - y == -(y - x)\r\n        // (-x) - (-y) == y - x == -(x - y)\r\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\r\n            return JSBI.__absoluteSub(x, y, sign);\r\n        }\r\n        return JSBI.__absoluteSub(y, x, !sign);\r\n    }\r\n    static leftShift(x, y) {\r\n        if (y.length === 0 || x.length === 0)\r\n            return x;\r\n        if (y.sign)\r\n            return JSBI.__rightShiftByAbsolute(x, y);\r\n        return JSBI.__leftShiftByAbsolute(x, y);\r\n    }\r\n    static signedRightShift(x, y) {\r\n        if (y.length === 0 || x.length === 0)\r\n            return x;\r\n        if (y.sign)\r\n            return JSBI.__leftShiftByAbsolute(x, y);\r\n        return JSBI.__rightShiftByAbsolute(x, y);\r\n    }\r\n    static unsignedRightShift() {\r\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\r\n    }\r\n    static lessThan(x, y) {\r\n        return JSBI.__compareToBigInt(x, y) < 0;\r\n    }\r\n    static lessThanOrEqual(x, y) {\r\n        return JSBI.__compareToBigInt(x, y) <= 0;\r\n    }\r\n    static greaterThan(x, y) {\r\n        return JSBI.__compareToBigInt(x, y) > 0;\r\n    }\r\n    static greaterThanOrEqual(x, y) {\r\n        return JSBI.__compareToBigInt(x, y) >= 0;\r\n    }\r\n    static equal(x, y) {\r\n        if (x.sign !== y.sign)\r\n            return false;\r\n        if (x.length !== y.length)\r\n            return false;\r\n        for (let i = 0; i < x.length; i++) {\r\n            if (x.__digit(i) !== y.__digit(i))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    static notEqual(x, y) {\r\n        return !JSBI.equal(x, y);\r\n    }\r\n    static bitwiseAnd(x, y) {\r\n        if (!x.sign && !y.sign) {\r\n            return JSBI.__absoluteAnd(x, y).__trim();\r\n        }\r\n        else if (x.sign && y.sign) {\r\n            const resultLength = Math.max(x.length, y.length) + 1;\r\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\r\n            // == -(((x-1) | (y-1)) + 1)\r\n            let result = JSBI.__absoluteSubOne(x, resultLength);\r\n            const y1 = JSBI.__absoluteSubOne(y);\r\n            result = JSBI.__absoluteOr(result, y1, result);\r\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\r\n        }\r\n        // Assume that x is the positive BigInt.\r\n        if (x.sign) {\r\n            [x, y] = [y, x];\r\n        }\r\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\r\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\r\n    }\r\n    static bitwiseXor(x, y) {\r\n        if (!x.sign && !y.sign) {\r\n            return JSBI.__absoluteXor(x, y).__trim();\r\n        }\r\n        else if (x.sign && y.sign) {\r\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\r\n            const resultLength = Math.max(x.length, y.length);\r\n            const result = JSBI.__absoluteSubOne(x, resultLength);\r\n            const y1 = JSBI.__absoluteSubOne(y);\r\n            return JSBI.__absoluteXor(result, y1, result).__trim();\r\n        }\r\n        const resultLength = Math.max(x.length, y.length) + 1;\r\n        // Assume that x is the positive BigInt.\r\n        if (x.sign) {\r\n            [x, y] = [y, x];\r\n        }\r\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\r\n        let result = JSBI.__absoluteSubOne(y, resultLength);\r\n        result = JSBI.__absoluteXor(result, x, result);\r\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\r\n    }\r\n    static bitwiseOr(x, y) {\r\n        const resultLength = Math.max(x.length, y.length);\r\n        if (!x.sign && !y.sign) {\r\n            return JSBI.__absoluteOr(x, y).__trim();\r\n        }\r\n        else if (x.sign && y.sign) {\r\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\r\n            // == -(((x-1) & (y-1)) + 1)\r\n            let result = JSBI.__absoluteSubOne(x, resultLength);\r\n            const y1 = JSBI.__absoluteSubOne(y);\r\n            result = JSBI.__absoluteAnd(result, y1, result);\r\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\r\n        }\r\n        // Assume that x is the positive BigInt.\r\n        if (x.sign) {\r\n            [x, y] = [y, x];\r\n        }\r\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\r\n        let result = JSBI.__absoluteSubOne(y, resultLength);\r\n        result = JSBI.__absoluteAndNot(result, x, result);\r\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\r\n    }\r\n    static asIntN(n, x) {\r\n        if (x.length === 0)\r\n            return x;\r\n        n = Math.floor(n);\r\n        if (n < 0) {\r\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\r\n        }\r\n        if (n === 0)\r\n            return JSBI.__zero();\r\n        // If {x} has less than {n} bits, return it directly.\r\n        if (n >= JSBI.__kMaxLengthBits)\r\n            return x;\r\n        const neededLength = ((n + 29) / 30) | 0;\r\n        if (x.length < neededLength)\r\n            return x;\r\n        const topDigit = x.__unsignedDigit(neededLength - 1);\r\n        const compareDigit = 1 << (n - 1) % 30;\r\n        if (x.length === neededLength && topDigit < compareDigit)\r\n            return x;\r\n        // Otherwise truncate and simulate two's complement.\r\n        const hasBit = (topDigit & compareDigit) === compareDigit;\r\n        if (!hasBit)\r\n            return JSBI.__truncateToNBits(n, x);\r\n        if (!x.sign)\r\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\r\n        if ((topDigit & (compareDigit - 1)) === 0) {\r\n            for (let i = neededLength - 2; i >= 0; i--) {\r\n                if (x.__digit(i) !== 0) {\r\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\r\n                }\r\n            }\r\n            if (x.length === neededLength && topDigit === compareDigit)\r\n                return x;\r\n            return JSBI.__truncateToNBits(n, x);\r\n        }\r\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\r\n    }\r\n    static asUintN(n, x) {\r\n        if (x.length === 0)\r\n            return x;\r\n        n = Math.floor(n);\r\n        if (n < 0) {\r\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\r\n        }\r\n        if (n === 0)\r\n            return JSBI.__zero();\r\n        // If {x} is negative, simulate two's complement representation.\r\n        if (x.sign) {\r\n            if (n > JSBI.__kMaxLengthBits) {\r\n                throw new RangeError('BigInt too big');\r\n            }\r\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\r\n        }\r\n        // If {x} is positive and has up to {n} bits, return it directly.\r\n        if (n >= JSBI.__kMaxLengthBits)\r\n            return x;\r\n        const neededLength = ((n + 29) / 30) | 0;\r\n        if (x.length < neededLength)\r\n            return x;\r\n        const bitsInTopDigit = n % 30;\r\n        if (x.length == neededLength) {\r\n            if (bitsInTopDigit === 0)\r\n                return x;\r\n            const topDigit = x.__digit(neededLength - 1);\r\n            if (topDigit >>> bitsInTopDigit === 0)\r\n                return x;\r\n        }\r\n        // Otherwise, truncate.\r\n        return JSBI.__truncateToNBits(n, x);\r\n    }\r\n    // Operators.\r\n    static ADD(x, y) {\r\n        x = JSBI.__toPrimitive(x);\r\n        y = JSBI.__toPrimitive(y);\r\n        if (typeof x === 'string') {\r\n            if (typeof y !== 'string')\r\n                y = y.toString();\r\n            return x + y;\r\n        }\r\n        if (typeof y === 'string') {\r\n            return x.toString() + y;\r\n        }\r\n        x = JSBI.__toNumeric(x);\r\n        y = JSBI.__toNumeric(y);\r\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\r\n            return JSBI.add(x, y);\r\n        }\r\n        if (typeof x === 'number' && typeof y === 'number') {\r\n            return x + y;\r\n        }\r\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\r\n    }\r\n    static LT(x, y) {\r\n        return JSBI.__compare(x, y, 0);\r\n    }\r\n    static LE(x, y) {\r\n        return JSBI.__compare(x, y, 1);\r\n    }\r\n    static GT(x, y) {\r\n        return JSBI.__compare(x, y, 2);\r\n    }\r\n    static GE(x, y) {\r\n        return JSBI.__compare(x, y, 3);\r\n    }\r\n    static EQ(x, y) {\r\n        while (true) {\r\n            if (JSBI.__isBigInt(x)) {\r\n                if (JSBI.__isBigInt(y))\r\n                    return JSBI.equal(x, y);\r\n                return JSBI.EQ(y, x);\r\n            }\r\n            else if (typeof x === 'number') {\r\n                if (JSBI.__isBigInt(y))\r\n                    return JSBI.__equalToNumber(y, x);\r\n                if (typeof y !== 'object')\r\n                    return x == y;\r\n                y = JSBI.__toPrimitive(y);\r\n            }\r\n            else if (typeof x === 'string') {\r\n                if (JSBI.__isBigInt(y)) {\r\n                    x = JSBI.__fromString(x);\r\n                    if (x === null)\r\n                        return false;\r\n                    return JSBI.equal(x, y);\r\n                }\r\n                if (typeof y !== 'object')\r\n                    return x == y;\r\n                y = JSBI.__toPrimitive(y);\r\n            }\r\n            else if (typeof x === 'boolean') {\r\n                if (JSBI.__isBigInt(y))\r\n                    return JSBI.__equalToNumber(y, +x);\r\n                if (typeof y !== 'object')\r\n                    return x == y;\r\n                y = JSBI.__toPrimitive(y);\r\n            }\r\n            else if (typeof x === 'symbol') {\r\n                if (JSBI.__isBigInt(y))\r\n                    return false;\r\n                if (typeof y !== 'object')\r\n                    return x == y;\r\n                y = JSBI.__toPrimitive(y);\r\n            }\r\n            else if (typeof x === 'object') {\r\n                if (typeof y === 'object' && y.constructor !== JSBI)\r\n                    return x == y;\r\n                x = JSBI.__toPrimitive(x);\r\n            }\r\n            else {\r\n                return x == y;\r\n            }\r\n        }\r\n    }\r\n    static NE(x, y) {\r\n        return !JSBI.EQ(x, y);\r\n    }\r\n    // DataView-related functionality.\r\n    static DataViewGetBigInt64(dataview, byteOffset, littleEndian = false) {\r\n        return JSBI.asIntN(64, JSBI.DataViewGetBigUint64(dataview, byteOffset, littleEndian));\r\n    }\r\n    static DataViewGetBigUint64(dataview, byteOffset, littleEndian = false) {\r\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\r\n        const high = dataview.getUint32(byteOffset + h, littleEndian);\r\n        const low = dataview.getUint32(byteOffset + l, littleEndian);\r\n        const result = new JSBI(3, false);\r\n        result.__setDigit(0, low & 0x3fffffff);\r\n        result.__setDigit(1, ((high & 0xfffffff) << 2) | (low >>> 30));\r\n        result.__setDigit(2, high >>> 28);\r\n        return result.__trim();\r\n    }\r\n    static DataViewSetBigInt64(dataview, byteOffset, value, littleEndian = false) {\r\n        JSBI.DataViewSetBigUint64(dataview, byteOffset, value, littleEndian);\r\n    }\r\n    static DataViewSetBigUint64(dataview, byteOffset, value, littleEndian = false) {\r\n        value = JSBI.asUintN(64, value);\r\n        let high = 0;\r\n        let low = 0;\r\n        if (value.length > 0) {\r\n            low = value.__digit(0);\r\n            if (value.length > 1) {\r\n                const d1 = value.__digit(1);\r\n                low = low | (d1 << 30);\r\n                high = d1 >>> 2;\r\n                if (value.length > 2) {\r\n                    high = high | (value.__digit(2) << 28);\r\n                }\r\n            }\r\n        }\r\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\r\n        dataview.setUint32(byteOffset + h, high, littleEndian);\r\n        dataview.setUint32(byteOffset + l, low, littleEndian);\r\n    }\r\n    // Helpers.\r\n    static __zero() {\r\n        return new JSBI(0, false);\r\n    }\r\n    static __oneDigit(value, sign) {\r\n        const result = new JSBI(1, sign);\r\n        result.__setDigit(0, value); // length = 1 , this.0 = 实际number的值\r\n        return result;\r\n    }\r\n    __copy() {\r\n        const result = new JSBI(this.length, this.sign);\r\n        for (let i = 0; i < this.length; i++) {\r\n            result[i] = this[i];\r\n        }\r\n        return result;\r\n    }\r\n    __trim() {\r\n        let newLength = this.length;\r\n        let last = this[newLength - 1];\r\n        while (last === 0) {\r\n            newLength--;\r\n            last = this[newLength - 1];\r\n            this.pop();\r\n        }\r\n        if (newLength === 0)\r\n            this.sign = false;\r\n        return this;\r\n    }\r\n    __initializeDigits() {\r\n        for (let i = 0; i < this.length; i++) {\r\n            this[i] = 0;\r\n        }\r\n    }\r\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\r\n        if (mantissaBitsUnset > 0)\r\n            return -1;\r\n        let topUnconsumedBit;\r\n        if (mantissaBitsUnset < 0) {\r\n            topUnconsumedBit = -mantissaBitsUnset - 1;\r\n        }\r\n        else {\r\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\r\n            if (digitIndex === 0)\r\n                return -1;\r\n            digitIndex--;\r\n            currentDigit = x.__digit(digitIndex);\r\n            topUnconsumedBit = 29;\r\n        }\r\n        // If the most significant remaining bit is 0, round down.\r\n        let mask = 1 << topUnconsumedBit;\r\n        if ((currentDigit & mask) === 0)\r\n            return -1;\r\n        // If any other remaining bit is set, round up.\r\n        mask -= 1;\r\n        if ((currentDigit & mask) !== 0)\r\n            return 1;\r\n        while (digitIndex > 0) {\r\n            digitIndex--;\r\n            if (x.__digit(digitIndex) !== 0)\r\n                return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    static __fromDouble(value) {\r\n        const sign = value < 0;\r\n        JSBI.__kBitConversionDouble[0] = value;\r\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7ff;\r\n        const exponent = rawExponent - 0x3ff;\r\n        const digits = ((exponent / 30) | 0) + 1;\r\n        const result = new JSBI(digits, sign);\r\n        const kHiddenBit = 0x00100000;\r\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xfffff) | kHiddenBit;\r\n        let mantissaLow = JSBI.__kBitConversionInts[0];\r\n        const kMantissaHighTopBit = 20;\r\n        // 0-indexed position of most significant bit in most significant digit.\r\n        const msdTopBit = exponent % 30;\r\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\r\n        // left (i.e. most significant part).\r\n        let remainingMantissaBits = 0;\r\n        // Next digit under construction.\r\n        let digit;\r\n        // First, build the MSD by shifting the mantissa appropriately.\r\n        if (msdTopBit < kMantissaHighTopBit) {\r\n            const shift = kMantissaHighTopBit - msdTopBit;\r\n            remainingMantissaBits = shift + 32;\r\n            digit = mantissaHigh >>> shift;\r\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\r\n            mantissaLow = mantissaLow << (32 - shift);\r\n        }\r\n        else if (msdTopBit === kMantissaHighTopBit) {\r\n            remainingMantissaBits = 32;\r\n            digit = mantissaHigh;\r\n            mantissaHigh = mantissaLow;\r\n            mantissaLow = 0;\r\n        }\r\n        else {\r\n            const shift = msdTopBit - kMantissaHighTopBit;\r\n            remainingMantissaBits = 32 - shift;\r\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\r\n            mantissaHigh = mantissaLow << shift;\r\n            mantissaLow = 0;\r\n        }\r\n        result.__setDigit(digits - 1, digit);\r\n        // Then fill in the rest of the digits.\r\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\r\n            if (remainingMantissaBits > 0) {\r\n                remainingMantissaBits -= 30;\r\n                digit = mantissaHigh >>> 2;\r\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\r\n                mantissaLow = mantissaLow << 30;\r\n            }\r\n            else {\r\n                digit = 0;\r\n            }\r\n            result.__setDigit(digitIndex, digit);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    // 如其名，判断是否是空白符\r\n    static __isWhitespace(c) {\r\n        if (c <= 0x0d && c >= 0x09)\r\n            return true;\r\n        if (c <= 0x9f)\r\n            return c === 0x20;\r\n        if (c <= 0x01ffff) {\r\n            return c === 0xa0 || c === 0x1680;\r\n        }\r\n        if (c <= 0x02ffff) {\r\n            c &= 0x01ffff;\r\n            return (c <= 0x0a ||\r\n                c === 0x28 ||\r\n                c === 0x29 ||\r\n                c === 0x2f ||\r\n                c === 0x5f ||\r\n                c === 0x1000);\r\n        }\r\n        return c === 0xfeff;\r\n    }\r\n    static __fromString(string, radix = 0) {\r\n        let sign = 0;\r\n        let leadingZero = false;\r\n        const length = string.length;\r\n        let cursor = 0;\r\n        if (cursor === length)\r\n            return JSBI.__zero();\r\n        let current = string.charCodeAt(cursor);\r\n        // Skip whitespace.\r\n        while (JSBI.__isWhitespace(current)) {\r\n            if (++cursor === length)\r\n                return JSBI.__zero();\r\n            current = string.charCodeAt(cursor);\r\n        }\r\n        // Detect radix.\r\n        if (current === 0x2b) {\r\n            // '+'\r\n            if (++cursor === length)\r\n                return null;\r\n            current = string.charCodeAt(cursor);\r\n            sign = 1;\r\n        }\r\n        else if (current === 0x2d) {\r\n            // '-'\r\n            if (++cursor === length)\r\n                return null;\r\n            current = string.charCodeAt(cursor);\r\n            sign = -1;\r\n        }\r\n        if (radix === 0) {\r\n            radix = 10;\r\n            if (current === 0x30) {\r\n                // '0'\r\n                if (++cursor === length)\r\n                    return JSBI.__zero();\r\n                current = string.charCodeAt(cursor);\r\n                if (current === 0x58 || current === 0x78) {\r\n                    // 'X' or 'x'\r\n                    radix = 16;\r\n                    if (++cursor === length)\r\n                        return null;\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                else if (current === 0x4f || current === 0x6f) {\r\n                    // 'O' or 'o'\r\n                    radix = 8;\r\n                    if (++cursor === length)\r\n                        return null;\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                else if (current === 0x42 || current === 0x62) {\r\n                    // 'B' or 'b'\r\n                    radix = 2;\r\n                    if (++cursor === length)\r\n                        return null;\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                else {\r\n                    leadingZero = true;\r\n                }\r\n            }\r\n        }\r\n        else if (radix === 16) {\r\n            if (current === 0x30) {\r\n                // '0'\r\n                // Allow \"0x\" prefix.\r\n                if (++cursor === length)\r\n                    return JSBI.__zero();\r\n                current = string.charCodeAt(cursor);\r\n                if (current === 0x58 || current === 0x78) {\r\n                    // 'X' or 'x'\r\n                    if (++cursor === length)\r\n                        return null;\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                else {\r\n                    leadingZero = true;\r\n                }\r\n            }\r\n        }\r\n        if (sign !== 0 && radix !== 10)\r\n            return null;\r\n        // Skip leading zeros.\r\n        while (current === 0x30) {\r\n            leadingZero = true;\r\n            if (++cursor === length)\r\n                return JSBI.__zero();\r\n            current = string.charCodeAt(cursor);\r\n        }\r\n        // Allocate result.\r\n        const chars = length - cursor;\r\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\r\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\r\n        if (chars > (1 << 30) / bitsPerChar)\r\n            return null;\r\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\r\n        const resultLength = ((bitsMin + 29) / 30) | 0;\r\n        const result = new JSBI(resultLength, false);\r\n        // Parse.\r\n        const limDigit = radix < 10 ? radix : 10;\r\n        const limAlpha = radix > 10 ? radix - 10 : 0;\r\n        if ((radix & (radix - 1)) === 0) {\r\n            // Power-of-two radix.\r\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\r\n            const parts = [];\r\n            const partsBits = [];\r\n            let done = false;\r\n            do {\r\n                let part = 0;\r\n                let bits = 0;\r\n                while (true) {\r\n                    let d;\r\n                    if ((current - 48) >>> 0 < limDigit) {\r\n                        d = current - 48;\r\n                    }\r\n                    else if (((current | 32) - 97) >>> 0 < limAlpha) {\r\n                        d = (current | 32) - 87;\r\n                    }\r\n                    else {\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                    bits += bitsPerChar;\r\n                    part = (part << bitsPerChar) | d;\r\n                    if (++cursor === length) {\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                    current = string.charCodeAt(cursor);\r\n                    if (bits + bitsPerChar > 30)\r\n                        break;\r\n                }\r\n                parts.push(part);\r\n                partsBits.push(bits);\r\n            } while (!done);\r\n            JSBI.__fillFromParts(result, parts, partsBits);\r\n        }\r\n        else {\r\n            result.__initializeDigits();\r\n            let done = false;\r\n            let charsSoFar = 0;\r\n            do {\r\n                let part = 0;\r\n                let multiplier = 1;\r\n                while (true) {\r\n                    let d;\r\n                    if ((current - 48) >>> 0 < limDigit) {\r\n                        d = current - 48;\r\n                    }\r\n                    else if (((current | 32) - 97) >>> 0 < limAlpha) {\r\n                        d = (current | 32) - 87;\r\n                    }\r\n                    else {\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                    const m = multiplier * radix;\r\n                    if (m > 0x3fffffff)\r\n                        break;\r\n                    multiplier = m;\r\n                    part = part * radix + d;\r\n                    charsSoFar++;\r\n                    if (++cursor === length) {\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\r\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\r\n                    JSBI.__kBitsPerCharTableShift) /\r\n                    30) |\r\n                    0;\r\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\r\n            } while (!done);\r\n        }\r\n        if (cursor !== length) {\r\n            if (!JSBI.__isWhitespace(current))\r\n                return null;\r\n            for (cursor++; cursor < length; cursor++) {\r\n                current = string.charCodeAt(cursor);\r\n                if (!JSBI.__isWhitespace(current))\r\n                    return null;\r\n            }\r\n        }\r\n        // Get result.\r\n        result.sign = sign === -1;\r\n        return result.__trim();\r\n    }\r\n    static __fillFromParts(result, parts, partsBits) {\r\n        let digitIndex = 0;\r\n        let digit = 0;\r\n        let bitsInDigit = 0;\r\n        for (let i = parts.length - 1; i >= 0; i--) {\r\n            const part = parts[i];\r\n            const partBits = partsBits[i];\r\n            digit |= part << bitsInDigit;\r\n            bitsInDigit += partBits;\r\n            if (bitsInDigit === 30) {\r\n                result.__setDigit(digitIndex++, digit);\r\n                bitsInDigit = 0;\r\n                digit = 0;\r\n            }\r\n            else if (bitsInDigit > 30) {\r\n                result.__setDigit(digitIndex++, digit & 0x3fffffff);\r\n                bitsInDigit -= 30;\r\n                digit = part >>> (partBits - bitsInDigit);\r\n            }\r\n        }\r\n        if (digit !== 0) {\r\n            if (digitIndex >= result.length)\r\n                throw new Error('implementation bug');\r\n            result.__setDigit(digitIndex++, digit);\r\n        }\r\n        for (; digitIndex < result.length; digitIndex++) {\r\n            result.__setDigit(digitIndex, 0);\r\n        }\r\n    }\r\n    static __toStringBasePowerOfTwo(x, radix) {\r\n        const length = x.length;\r\n        let bits = radix - 1;\r\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\r\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\r\n        bits = ((bits >>> 4) & 0x0f) + (bits & 0x0f);\r\n        const bitsPerChar = bits;\r\n        const charMask = radix - 1;\r\n        const msd = x.__digit(length - 1);\r\n        const msdLeadingZeros = JSBI.__clz30(msd);\r\n        const bitLength = length * 30 - msdLeadingZeros;\r\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\r\n        if (x.sign)\r\n            charsRequired++;\r\n        if (charsRequired > 1 << 28)\r\n            throw new Error('string too long');\r\n        const result = new Array(charsRequired);\r\n        let pos = charsRequired - 1;\r\n        let digit = 0;\r\n        let availableBits = 0;\r\n        for (let i = 0; i < length - 1; i++) {\r\n            const newDigit = x.__digit(i);\r\n            const current = (digit | (newDigit << availableBits)) & charMask;\r\n            result[pos--] = JSBI.__kConversionChars[current];\r\n            const consumedBits = bitsPerChar - availableBits;\r\n            digit = newDigit >>> consumedBits;\r\n            availableBits = 30 - consumedBits;\r\n            while (availableBits >= bitsPerChar) {\r\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\r\n                digit >>>= bitsPerChar;\r\n                availableBits -= bitsPerChar;\r\n            }\r\n        }\r\n        const current = (digit | (msd << availableBits)) & charMask;\r\n        result[pos--] = JSBI.__kConversionChars[current];\r\n        digit = msd >>> (bitsPerChar - availableBits);\r\n        while (digit !== 0) {\r\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\r\n            digit >>>= bitsPerChar;\r\n        }\r\n        if (x.sign)\r\n            result[pos--] = '-';\r\n        if (pos !== -1)\r\n            throw new Error('implementation bug');\r\n        return result.join('');\r\n    }\r\n    static __toStringGeneric(x, radix, isRecursiveCall) {\r\n        const length = x.length;\r\n        if (length === 0)\r\n            return '';\r\n        if (length === 1) {\r\n            let result = x.__unsignedDigit(0).toString(radix);\r\n            if (isRecursiveCall === false && x.sign) {\r\n                result = '-' + result;\r\n            }\r\n            return result;\r\n        }\r\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\r\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\r\n        const minBitsPerChar = maxBitsPerChar - 1;\r\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\r\n        charsRequired += minBitsPerChar - 1;\r\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\r\n        const secondHalfChars = (charsRequired + 1) >> 1;\r\n        // Divide-and-conquer: split by a power of {radix} that's approximately\r\n        // the square root of {x}, then recurse.\r\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\r\n        let quotient;\r\n        let secondHalf;\r\n        const divisor = conqueror.__unsignedDigit(0);\r\n        if (conqueror.length === 1 && divisor <= 0x7fff) {\r\n            quotient = new JSBI(x.length, false);\r\n            quotient.__initializeDigits();\r\n            let remainder = 0;\r\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\r\n                const input = (remainder << 15) | x.__halfDigit(i);\r\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\r\n                remainder = input % divisor | 0;\r\n            }\r\n            secondHalf = remainder.toString(radix);\r\n        }\r\n        else {\r\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\r\n            quotient = divisionResult.quotient;\r\n            const remainder = divisionResult.remainder.__trim();\r\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\r\n        }\r\n        quotient.__trim();\r\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\r\n        while (secondHalf.length < secondHalfChars) {\r\n            secondHalf = '0' + secondHalf;\r\n        }\r\n        if (isRecursiveCall === false && x.sign) {\r\n            firstHalf = '-' + firstHalf;\r\n        }\r\n        return firstHalf + secondHalf;\r\n    }\r\n    static __unequalSign(leftNegative) {\r\n        return leftNegative ? -1 : 1;\r\n    }\r\n    static __absoluteGreater(bothNegative) {\r\n        return bothNegative ? -1 : 1;\r\n    }\r\n    static __absoluteLess(bothNegative) {\r\n        return bothNegative ? 1 : -1;\r\n    }\r\n    static __compareToBigInt(x, y) {\r\n        const xSign = x.sign;\r\n        if (xSign !== y.sign)\r\n            return JSBI.__unequalSign(xSign);\r\n        const result = JSBI.__absoluteCompare(x, y);\r\n        if (result > 0)\r\n            return JSBI.__absoluteGreater(xSign);\r\n        if (result < 0)\r\n            return JSBI.__absoluteLess(xSign);\r\n        return 0;\r\n    }\r\n    static __compareToNumber(x, y) {\r\n        if (JSBI.__isOneDigitInt(y)) {\r\n            const xSign = x.sign;\r\n            const ySign = y < 0;\r\n            if (xSign !== ySign)\r\n                return JSBI.__unequalSign(xSign);\r\n            if (x.length === 0) {\r\n                if (ySign)\r\n                    throw new Error('implementation bug');\r\n                return y === 0 ? 0 : -1;\r\n            }\r\n            // Any multi-digit BigInt is bigger than an int32.\r\n            if (x.length > 1)\r\n                return JSBI.__absoluteGreater(xSign);\r\n            const yAbs = Math.abs(y);\r\n            const xDigit = x.__unsignedDigit(0);\r\n            if (xDigit > yAbs)\r\n                return JSBI.__absoluteGreater(xSign);\r\n            if (xDigit < yAbs)\r\n                return JSBI.__absoluteLess(xSign);\r\n            return 0;\r\n        }\r\n        return JSBI.__compareToDouble(x, y);\r\n    }\r\n    static __compareToDouble(x, y) {\r\n        if (y !== y)\r\n            return y; // NaN.\r\n        if (y === Infinity)\r\n            return -1;\r\n        if (y === -Infinity)\r\n            return 1;\r\n        const xSign = x.sign;\r\n        const ySign = y < 0;\r\n        if (xSign !== ySign)\r\n            return JSBI.__unequalSign(xSign);\r\n        if (y === 0) {\r\n            throw new Error('implementation bug: should be handled elsewhere');\r\n        }\r\n        if (x.length === 0)\r\n            return -1;\r\n        JSBI.__kBitConversionDouble[0] = y;\r\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7ff;\r\n        if (rawExponent === 0x7ff) {\r\n            throw new Error('implementation bug: handled elsewhere');\r\n        }\r\n        const exponent = rawExponent - 0x3ff;\r\n        if (exponent < 0) {\r\n            // The absolute value of y is less than 1. Only 0n has an absolute\r\n            // value smaller than that, but we've already covered that case.\r\n            return JSBI.__absoluteGreater(xSign);\r\n        }\r\n        const xLength = x.length;\r\n        let xMsd = x.__digit(xLength - 1);\r\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\r\n        const xBitLength = xLength * 30 - msdLeadingZeros;\r\n        const yBitLength = exponent + 1;\r\n        if (xBitLength < yBitLength)\r\n            return JSBI.__absoluteLess(xSign);\r\n        if (xBitLength > yBitLength)\r\n            return JSBI.__absoluteGreater(xSign);\r\n        // Same sign, same bit length. Shift mantissa to align with x and compare\r\n        // bit for bit.\r\n        const kHiddenBit = 0x00100000;\r\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xfffff) | kHiddenBit;\r\n        let mantissaLow = JSBI.__kBitConversionInts[0];\r\n        const kMantissaHighTopBit = 20;\r\n        const msdTopBit = 29 - msdLeadingZeros;\r\n        if (msdTopBit !== ((xBitLength - 1) % 30 | 0)) {\r\n            throw new Error('implementation bug');\r\n        }\r\n        let compareMantissa; // Shifted chunk of mantissa.\r\n        let remainingMantissaBits = 0;\r\n        // First, compare most significant digit against beginning of mantissa.\r\n        if (msdTopBit < kMantissaHighTopBit) {\r\n            const shift = kMantissaHighTopBit - msdTopBit;\r\n            remainingMantissaBits = shift + 32;\r\n            compareMantissa = mantissaHigh >>> shift;\r\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\r\n            mantissaLow = mantissaLow << (32 - shift);\r\n        }\r\n        else if (msdTopBit === kMantissaHighTopBit) {\r\n            remainingMantissaBits = 32;\r\n            compareMantissa = mantissaHigh;\r\n            mantissaHigh = mantissaLow;\r\n            mantissaLow = 0;\r\n        }\r\n        else {\r\n            const shift = msdTopBit - kMantissaHighTopBit;\r\n            remainingMantissaBits = 32 - shift;\r\n            compareMantissa =\r\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\r\n            mantissaHigh = mantissaLow << shift;\r\n            mantissaLow = 0;\r\n        }\r\n        xMsd = xMsd >>> 0;\r\n        compareMantissa = compareMantissa >>> 0;\r\n        if (xMsd > compareMantissa)\r\n            return JSBI.__absoluteGreater(xSign);\r\n        if (xMsd < compareMantissa)\r\n            return JSBI.__absoluteLess(xSign);\r\n        // Then, compare additional digits against remaining mantissa bits.\r\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\r\n            if (remainingMantissaBits > 0) {\r\n                remainingMantissaBits -= 30;\r\n                compareMantissa = mantissaHigh >>> 2;\r\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\r\n                mantissaLow = mantissaLow << 30;\r\n            }\r\n            else {\r\n                compareMantissa = 0;\r\n            }\r\n            const digit = x.__unsignedDigit(digitIndex);\r\n            if (digit > compareMantissa)\r\n                return JSBI.__absoluteGreater(xSign);\r\n            if (digit < compareMantissa)\r\n                return JSBI.__absoluteLess(xSign);\r\n        }\r\n        // Integer parts are equal; check whether {y} has a fractional part.\r\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\r\n            if (remainingMantissaBits === 0)\r\n                throw new Error('implementation bug');\r\n            return JSBI.__absoluteLess(xSign);\r\n        }\r\n        return 0;\r\n    }\r\n    static __equalToNumber(x, y) {\r\n        if (JSBI.__isOneDigitInt(y)) {\r\n            if (y === 0)\r\n                return x.length === 0;\r\n            // Any multi-digit BigInt is bigger than an int32.\r\n            return (x.length === 1 &&\r\n                x.sign === y < 0 &&\r\n                x.__unsignedDigit(0) === Math.abs(y));\r\n        }\r\n        return JSBI.__compareToDouble(x, y) === 0;\r\n    }\r\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\r\n    // 0 - lessThan\r\n    // 1 - lessThanOrEqual\r\n    // 2 - greaterThan\r\n    // 3 - greaterThanOrEqual\r\n    static __comparisonResultToBool(result, op) {\r\n        switch (op) {\r\n            case 0:\r\n                return result < 0;\r\n            case 1:\r\n                return result <= 0;\r\n            case 2:\r\n                return result > 0;\r\n            case 3:\r\n                return result >= 0;\r\n        }\r\n    }\r\n    static __compare(x, y, op) {\r\n        x = JSBI.__toPrimitive(x);\r\n        y = JSBI.__toPrimitive(y);\r\n        if (typeof x === 'string' && typeof y === 'string') {\r\n            switch (op) {\r\n                case 0:\r\n                    return x < y;\r\n                case 1:\r\n                    return x <= y;\r\n                case 2:\r\n                    return x > y;\r\n                case 3:\r\n                    return x >= y;\r\n            }\r\n        }\r\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\r\n            y = JSBI.__fromString(y);\r\n            if (y === null)\r\n                return false;\r\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\r\n        }\r\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\r\n            x = JSBI.__fromString(x);\r\n            if (x === null)\r\n                return false;\r\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\r\n        }\r\n        x = JSBI.__toNumeric(x);\r\n        y = JSBI.__toNumeric(y);\r\n        if (JSBI.__isBigInt(x)) {\r\n            if (JSBI.__isBigInt(y)) {\r\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\r\n            }\r\n            if (typeof y !== 'number')\r\n                throw new Error('implementation bug');\r\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\r\n        }\r\n        if (typeof x !== 'number')\r\n            throw new Error('implementation bug');\r\n        if (JSBI.__isBigInt(y)) {\r\n            // Note that \"op ^ 2\" reverses the op's direction.\r\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\r\n        }\r\n        if (typeof y !== 'number')\r\n            throw new Error('implementation bug');\r\n        switch (op) {\r\n            case 0:\r\n                return x < y;\r\n            case 1:\r\n                return x <= y;\r\n            case 2:\r\n                return x > y;\r\n            case 3:\r\n                return x >= y;\r\n        }\r\n    }\r\n    __clzmsd() {\r\n        return JSBI.__clz30(this.__digit(this.length - 1));\r\n    }\r\n    static __absoluteAdd(x, y, resultSign) {\r\n        if (x.length < y.length)\r\n            return JSBI.__absoluteAdd(y, x, resultSign);\r\n        if (x.length === 0)\r\n            return x;\r\n        if (y.length === 0)\r\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\r\n        let resultLength = x.length;\r\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\r\n            resultLength++;\r\n        }\r\n        const result = new JSBI(resultLength, resultSign);\r\n        let carry = 0;\r\n        let i = 0;\r\n        for (; i < y.length; i++) {\r\n            const r = x.__digit(i) + y.__digit(i) + carry;\r\n            carry = r >>> 30;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        for (; i < x.length; i++) {\r\n            const r = x.__digit(i) + carry;\r\n            carry = r >>> 30;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        if (i < result.length) {\r\n            result.__setDigit(i, carry);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static __absoluteSub(x, y, resultSign) {\r\n        if (x.length === 0)\r\n            return x;\r\n        if (y.length === 0)\r\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\r\n        const result = new JSBI(x.length, resultSign);\r\n        let borrow = 0;\r\n        let i = 0;\r\n        for (; i < y.length; i++) {\r\n            const r = x.__digit(i) - y.__digit(i) - borrow;\r\n            borrow = (r >>> 30) & 1;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        for (; i < x.length; i++) {\r\n            const r = x.__digit(i) - borrow;\r\n            borrow = (r >>> 30) & 1;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static __absoluteAddOne(x, sign, result = null) {\r\n        const inputLength = x.length;\r\n        if (result === null) {\r\n            result = new JSBI(inputLength, sign);\r\n        }\r\n        else {\r\n            result.sign = sign;\r\n        }\r\n        let carry = 1;\r\n        for (let i = 0; i < inputLength; i++) {\r\n            const r = x.__digit(i) + carry;\r\n            carry = r >>> 30;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        if (carry !== 0) {\r\n            result.__setDigitGrow(inputLength, 1);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteSubOne(x, resultLength) {\r\n        const length = x.length;\r\n        resultLength = resultLength || length;\r\n        const result = new JSBI(resultLength, false);\r\n        let borrow = 1;\r\n        for (let i = 0; i < length; i++) {\r\n            const r = x.__digit(i) - borrow;\r\n            borrow = (r >>> 30) & 1;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        if (borrow !== 0)\r\n            throw new Error('implementation bug');\r\n        for (let i = length; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteAnd(x, y, result = null) {\r\n        let xLength = x.length;\r\n        let yLength = y.length;\r\n        let numPairs = yLength;\r\n        if (xLength < yLength) {\r\n            numPairs = xLength;\r\n            const tmp = x;\r\n            const tmpLength = xLength;\r\n            x = y;\r\n            xLength = yLength;\r\n            y = tmp;\r\n            yLength = tmpLength;\r\n        }\r\n        let resultLength = numPairs;\r\n        if (result === null) {\r\n            result = new JSBI(resultLength, false);\r\n        }\r\n        else {\r\n            resultLength = result.length;\r\n        }\r\n        let i = 0;\r\n        for (; i < numPairs; i++) {\r\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\r\n        }\r\n        for (; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteAndNot(x, y, result = null) {\r\n        const xLength = x.length;\r\n        const yLength = y.length;\r\n        let numPairs = yLength;\r\n        if (xLength < yLength) {\r\n            numPairs = xLength;\r\n        }\r\n        let resultLength = xLength;\r\n        if (result === null) {\r\n            result = new JSBI(resultLength, false);\r\n        }\r\n        else {\r\n            resultLength = result.length;\r\n        }\r\n        let i = 0;\r\n        for (; i < numPairs; i++) {\r\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\r\n        }\r\n        for (; i < xLength; i++) {\r\n            result.__setDigit(i, x.__digit(i));\r\n        }\r\n        for (; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteOr(x, y, result = null) {\r\n        let xLength = x.length;\r\n        let yLength = y.length;\r\n        let numPairs = yLength;\r\n        if (xLength < yLength) {\r\n            numPairs = xLength;\r\n            const tmp = x;\r\n            const tmpLength = xLength;\r\n            x = y;\r\n            xLength = yLength;\r\n            y = tmp;\r\n            yLength = tmpLength;\r\n        }\r\n        let resultLength = xLength;\r\n        if (result === null) {\r\n            result = new JSBI(resultLength, false);\r\n        }\r\n        else {\r\n            resultLength = result.length;\r\n        }\r\n        let i = 0;\r\n        for (; i < numPairs; i++) {\r\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\r\n        }\r\n        for (; i < xLength; i++) {\r\n            result.__setDigit(i, x.__digit(i));\r\n        }\r\n        for (; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteXor(x, y, result = null) {\r\n        let xLength = x.length;\r\n        let yLength = y.length;\r\n        let numPairs = yLength;\r\n        if (xLength < yLength) {\r\n            numPairs = xLength;\r\n            const tmp = x;\r\n            const tmpLength = xLength;\r\n            x = y;\r\n            xLength = yLength;\r\n            y = tmp;\r\n            yLength = tmpLength;\r\n        }\r\n        let resultLength = xLength;\r\n        if (result === null) {\r\n            result = new JSBI(resultLength, false);\r\n        }\r\n        else {\r\n            resultLength = result.length;\r\n        }\r\n        let i = 0;\r\n        for (; i < numPairs; i++) {\r\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\r\n        }\r\n        for (; i < xLength; i++) {\r\n            result.__setDigit(i, x.__digit(i));\r\n        }\r\n        for (; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteCompare(x, y) {\r\n        const diff = x.length - y.length;\r\n        if (diff !== 0)\r\n            return diff;\r\n        let i = x.length - 1;\r\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\r\n            i--;\r\n        if (i < 0)\r\n            return 0;\r\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\r\n    }\r\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\r\n        if (multiplier === 0)\r\n            return;\r\n        const m2Low = multiplier & 0x7fff;\r\n        const m2High = multiplier >>> 15;\r\n        let carry = 0;\r\n        let high = 0;\r\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\r\n            let acc = accumulator.__digit(accumulatorIndex);\r\n            const m1 = multiplicand.__digit(i);\r\n            const m1Low = m1 & 0x7fff;\r\n            const m1High = m1 >>> 15;\r\n            const rLow = JSBI.__imul(m1Low, m2Low);\r\n            const rMid1 = JSBI.__imul(m1Low, m2High);\r\n            const rMid2 = JSBI.__imul(m1High, m2Low);\r\n            const rHigh = JSBI.__imul(m1High, m2High);\r\n            acc += high + rLow + carry;\r\n            carry = acc >>> 30;\r\n            acc &= 0x3fffffff;\r\n            acc += ((rMid1 & 0x7fff) << 15) + ((rMid2 & 0x7fff) << 15);\r\n            carry += acc >>> 30;\r\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\r\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3fffffff);\r\n        }\r\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\r\n            let acc = accumulator.__digit(accumulatorIndex);\r\n            acc += carry + high;\r\n            high = 0;\r\n            carry = acc >>> 30;\r\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3fffffff);\r\n        }\r\n    }\r\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\r\n        let carry = summand;\r\n        let high = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            const digit = source.__digit(i);\r\n            const rx = JSBI.__imul(digit & 0x7fff, factor);\r\n            const ry = JSBI.__imul(digit >>> 15, factor);\r\n            const r = rx + ((ry & 0x7fff) << 15) + high + carry;\r\n            carry = r >>> 30;\r\n            high = ry >>> 15;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        if (result.length > n) {\r\n            result.__setDigit(n++, carry + high);\r\n            while (n < result.length) {\r\n                result.__setDigit(n++, 0);\r\n            }\r\n        }\r\n        else {\r\n            if (carry + high !== 0)\r\n                throw new Error('implementation bug');\r\n        }\r\n    }\r\n    __inplaceMultiplyAdd(multiplier, summand, length) {\r\n        if (length > this.length)\r\n            length = this.length;\r\n        const mLow = multiplier & 0x7fff;\r\n        const mHigh = multiplier >>> 15;\r\n        let carry = 0;\r\n        let high = summand;\r\n        for (let i = 0; i < length; i++) {\r\n            const d = this.__digit(i);\r\n            const dLow = d & 0x7fff;\r\n            const dHigh = d >>> 15;\r\n            const pLow = JSBI.__imul(dLow, mLow);\r\n            const pMid1 = JSBI.__imul(dLow, mHigh);\r\n            const pMid2 = JSBI.__imul(dHigh, mLow);\r\n            const pHigh = JSBI.__imul(dHigh, mHigh);\r\n            let result = high + pLow + carry;\r\n            carry = result >>> 30;\r\n            result &= 0x3fffffff;\r\n            result += ((pMid1 & 0x7fff) << 15) + ((pMid2 & 0x7fff) << 15);\r\n            carry += result >>> 30;\r\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\r\n            this.__setDigit(i, result & 0x3fffffff);\r\n        }\r\n        if (carry !== 0 || high !== 0) {\r\n            throw new Error('implementation bug');\r\n        }\r\n    }\r\n    static __absoluteDivSmall(x, divisor, quotient = null) {\r\n        if (quotient === null)\r\n            quotient = new JSBI(x.length, false);\r\n        let remainder = 0;\r\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\r\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\r\n            const upperHalf = (input / divisor) | 0;\r\n            remainder = input % divisor | 0;\r\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\r\n            const lowerHalf = (input / divisor) | 0;\r\n            remainder = input % divisor | 0;\r\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\r\n        }\r\n        return quotient;\r\n    }\r\n    static __absoluteModSmall(x, divisor) {\r\n        let remainder = 0;\r\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\r\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\r\n            remainder = input % divisor | 0;\r\n        }\r\n        return remainder;\r\n    }\r\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\r\n        const n = divisor.__halfDigitLength();\r\n        const n2 = divisor.length;\r\n        const m = dividend.__halfDigitLength() - n;\r\n        let q = null;\r\n        if (wantQuotient) {\r\n            q = new JSBI((m + 2) >>> 1, false);\r\n            q.__initializeDigits();\r\n        }\r\n        const qhatv = new JSBI((n + 2) >>> 1, false);\r\n        qhatv.__initializeDigits();\r\n        // D1.\r\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\r\n        if (shift > 0) {\r\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\r\n        }\r\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\r\n        // D2.\r\n        const vn1 = divisor.__halfDigit(n - 1);\r\n        let halfDigitBuffer = 0;\r\n        for (let j = m; j >= 0; j--) {\r\n            // D3.\r\n            let qhat = 0x7fff;\r\n            const ujn = u.__halfDigit(j + n);\r\n            if (ujn !== vn1) {\r\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\r\n                qhat = (input / vn1) | 0;\r\n                let rhat = input % vn1 | 0;\r\n                const vn2 = divisor.__halfDigit(n - 2);\r\n                const ujn2 = u.__halfDigit(j + n - 2);\r\n                while (JSBI.__imul(qhat, vn2) >>> 0 > ((rhat << 16) | ujn2) >>> 0) {\r\n                    qhat--;\r\n                    rhat += vn1;\r\n                    if (rhat > 0x7fff)\r\n                        break;\r\n                }\r\n            }\r\n            // D4.\r\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\r\n            let c = u.__inplaceSub(qhatv, j, n + 1);\r\n            if (c !== 0) {\r\n                c = u.__inplaceAdd(divisor, j, n);\r\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7fff);\r\n                qhat--;\r\n            }\r\n            if (wantQuotient) {\r\n                if (j & 1) {\r\n                    halfDigitBuffer = qhat << 15;\r\n                }\r\n                else {\r\n                    // TODO make this statically determinable\r\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\r\n                }\r\n            }\r\n        }\r\n        if (wantRemainder) {\r\n            u.__inplaceRightShift(shift);\r\n            if (wantQuotient) {\r\n                return { quotient: q, remainder: u };\r\n            }\r\n            return u;\r\n        }\r\n        if (wantQuotient)\r\n            return q;\r\n        // TODO find a way to make this statically unreachable?\r\n        throw new Error('unreachable');\r\n    }\r\n    static __clz15(value) {\r\n        return JSBI.__clz30(value) - 15;\r\n    }\r\n    // TODO: work on full digits, like __inplaceSub?\r\n    __inplaceAdd(summand, startIndex, halfDigits) {\r\n        let carry = 0;\r\n        for (let i = 0; i < halfDigits; i++) {\r\n            const sum = this.__halfDigit(startIndex + i) + summand.__halfDigit(i) + carry;\r\n            carry = sum >>> 15;\r\n            this.__setHalfDigit(startIndex + i, sum & 0x7fff);\r\n        }\r\n        return carry;\r\n    }\r\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\r\n        const fullSteps = (halfDigits - 1) >>> 1;\r\n        let borrow = 0;\r\n        if (startIndex & 1) {\r\n            // this:   [..][..][..]\r\n            // subtr.:   [..][..]\r\n            startIndex >>= 1;\r\n            let current = this.__digit(startIndex);\r\n            let r0 = current & 0x7fff;\r\n            let i = 0;\r\n            for (; i < fullSteps; i++) {\r\n                const sub = subtrahend.__digit(i);\r\n                const r15 = (current >>> 15) - (sub & 0x7fff) - borrow;\r\n                borrow = (r15 >>> 15) & 1;\r\n                this.__setDigit(startIndex + i, ((r15 & 0x7fff) << 15) | (r0 & 0x7fff));\r\n                current = this.__digit(startIndex + i + 1);\r\n                r0 = (current & 0x7fff) - (sub >>> 15) - borrow;\r\n                borrow = (r0 >>> 15) & 1;\r\n            }\r\n            // Unrolling the last iteration gives a 5% performance benefit!\r\n            const sub = subtrahend.__digit(i);\r\n            const r15 = (current >>> 15) - (sub & 0x7fff) - borrow;\r\n            borrow = (r15 >>> 15) & 1;\r\n            this.__setDigit(startIndex + i, ((r15 & 0x7fff) << 15) | (r0 & 0x7fff));\r\n            const subTop = sub >>> 15;\r\n            if (startIndex + i + 1 >= this.length) {\r\n                throw new RangeError('out of bounds');\r\n            }\r\n            if ((halfDigits & 1) === 0) {\r\n                current = this.__digit(startIndex + i + 1);\r\n                r0 = (current & 0x7fff) - subTop - borrow;\r\n                borrow = (r0 >>> 15) & 1;\r\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3fff8000) | (r0 & 0x7fff));\r\n            }\r\n        }\r\n        else {\r\n            startIndex >>= 1;\r\n            let i = 0;\r\n            for (; i < subtrahend.length - 1; i++) {\r\n                const current = this.__digit(startIndex + i);\r\n                const sub = subtrahend.__digit(i);\r\n                const r0 = (current & 0x7fff) - (sub & 0x7fff) - borrow;\r\n                borrow = (r0 >>> 15) & 1;\r\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\r\n                borrow = (r15 >>> 15) & 1;\r\n                this.__setDigit(startIndex + i, ((r15 & 0x7fff) << 15) | (r0 & 0x7fff));\r\n            }\r\n            const current = this.__digit(startIndex + i);\r\n            const sub = subtrahend.__digit(i);\r\n            const r0 = (current & 0x7fff) - (sub & 0x7fff) - borrow;\r\n            borrow = (r0 >>> 15) & 1;\r\n            let r15 = 0;\r\n            if ((halfDigits & 1) === 0) {\r\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\r\n                borrow = (r15 >>> 15) & 1;\r\n            }\r\n            this.__setDigit(startIndex + i, ((r15 & 0x7fff) << 15) | (r0 & 0x7fff));\r\n        }\r\n        return borrow;\r\n    }\r\n    __inplaceRightShift(shift) {\r\n        if (shift === 0)\r\n            return;\r\n        let carry = this.__digit(0) >>> shift;\r\n        const last = this.length - 1;\r\n        for (let i = 0; i < last; i++) {\r\n            const d = this.__digit(i + 1);\r\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3fffffff) | carry);\r\n            carry = d >>> shift;\r\n        }\r\n        this.__setDigit(last, carry);\r\n    }\r\n    static __specialLeftShift(x, shift, addDigit) {\r\n        const n = x.length;\r\n        const resultLength = n + addDigit;\r\n        const result = new JSBI(resultLength, false);\r\n        if (shift === 0) {\r\n            for (let i = 0; i < n; i++)\r\n                result.__setDigit(i, x.__digit(i));\r\n            if (addDigit > 0)\r\n                result.__setDigit(n, 0);\r\n            return result;\r\n        }\r\n        let carry = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            const d = x.__digit(i);\r\n            result.__setDigit(i, ((d << shift) & 0x3fffffff) | carry);\r\n            carry = d >>> (30 - shift);\r\n        }\r\n        if (addDigit > 0) {\r\n            result.__setDigit(n, carry);\r\n        }\r\n        return result;\r\n    }\r\n    static __leftShiftByAbsolute(x, y) {\r\n        const shift = JSBI.__toShiftAmount(y);\r\n        if (shift < 0)\r\n            throw new RangeError('BigInt too big');\r\n        const digitShift = (shift / 30) | 0;\r\n        const bitsShift = shift % 30;\r\n        const length = x.length;\r\n        const grow = bitsShift !== 0 && x.__digit(length - 1) >>> (30 - bitsShift) !== 0;\r\n        const resultLength = length + digitShift + (grow ? 1 : 0);\r\n        const result = new JSBI(resultLength, x.sign);\r\n        if (bitsShift === 0) {\r\n            let i = 0;\r\n            for (; i < digitShift; i++)\r\n                result.__setDigit(i, 0);\r\n            for (; i < resultLength; i++) {\r\n                result.__setDigit(i, x.__digit(i - digitShift));\r\n            }\r\n        }\r\n        else {\r\n            let carry = 0;\r\n            for (let i = 0; i < digitShift; i++)\r\n                result.__setDigit(i, 0);\r\n            for (let i = 0; i < length; i++) {\r\n                const d = x.__digit(i);\r\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3fffffff) | carry);\r\n                carry = d >>> (30 - bitsShift);\r\n            }\r\n            if (grow) {\r\n                result.__setDigit(length + digitShift, carry);\r\n            }\r\n            else {\r\n                if (carry !== 0)\r\n                    throw new Error('implementation bug');\r\n            }\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static __rightShiftByAbsolute(x, y) {\r\n        const length = x.length;\r\n        const sign = x.sign;\r\n        const shift = JSBI.__toShiftAmount(y);\r\n        if (shift < 0)\r\n            return JSBI.__rightShiftByMaximum(sign);\r\n        const digitShift = (shift / 30) | 0;\r\n        const bitsShift = shift % 30;\r\n        let resultLength = length - digitShift;\r\n        if (resultLength <= 0)\r\n            return JSBI.__rightShiftByMaximum(sign);\r\n        // For negative numbers, round down if any bit was shifted out (so that\r\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\r\n        // and whether itc an cause overflow into a new digit. If we allocate the\r\n        // result large enough up front, it avoids having to do grow it later.\r\n        let mustRoundDown = false;\r\n        if (sign) {\r\n            const mask = (1 << bitsShift) - 1;\r\n            if ((x.__digit(digitShift) & mask) !== 0) {\r\n                mustRoundDown = true;\r\n            }\r\n            else {\r\n                for (let i = 0; i < digitShift; i++) {\r\n                    if (x.__digit(i) !== 0) {\r\n                        mustRoundDown = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\r\n        if (mustRoundDown && bitsShift === 0) {\r\n            // Overflow cannot happen if the most significant digit has unset bits.\r\n            const msd = x.__digit(length - 1);\r\n            const roundingCanOverflow = ~msd === 0;\r\n            if (roundingCanOverflow)\r\n                resultLength++;\r\n        }\r\n        let result = new JSBI(resultLength, sign);\r\n        if (bitsShift === 0) {\r\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\r\n            result.__setDigit(resultLength - 1, 0);\r\n            for (let i = digitShift; i < length; i++) {\r\n                result.__setDigit(i - digitShift, x.__digit(i));\r\n            }\r\n        }\r\n        else {\r\n            let carry = x.__digit(digitShift) >>> bitsShift;\r\n            const last = length - digitShift - 1;\r\n            for (let i = 0; i < last; i++) {\r\n                const d = x.__digit(i + digitShift + 1);\r\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3fffffff) | carry);\r\n                carry = d >>> bitsShift;\r\n            }\r\n            result.__setDigit(last, carry);\r\n        }\r\n        if (mustRoundDown) {\r\n            // Since the result is negative, rounding down means adding one to its\r\n            // absolute value. This cannot overflow.\r\n            result = JSBI.__absoluteAddOne(result, true, result);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static __rightShiftByMaximum(sign) {\r\n        if (sign) {\r\n            return JSBI.__oneDigit(1, true);\r\n        }\r\n        return JSBI.__zero();\r\n    }\r\n    static __toShiftAmount(x) {\r\n        if (x.length > 1)\r\n            return -1;\r\n        const value = x.__unsignedDigit(0);\r\n        if (value > JSBI.__kMaxLengthBits)\r\n            return -1;\r\n        return value;\r\n    }\r\n    static __toPrimitive(obj, hint = 'default') {\r\n        if (typeof obj !== 'object')\r\n            return obj;\r\n        if (obj.constructor === JSBI)\r\n            return obj;\r\n        if (typeof Symbol !== 'undefined' &&\r\n            typeof Symbol.toPrimitive === 'symbol') {\r\n            const exoticToPrim = obj[Symbol.toPrimitive];\r\n            if (exoticToPrim) {\r\n                const primitive = exoticToPrim(hint);\r\n                if (typeof primitive !== 'object')\r\n                    return primitive;\r\n                throw new TypeError('Cannot convert object to primitive value');\r\n            }\r\n        }\r\n        const valueOf = obj.valueOf;\r\n        if (valueOf) {\r\n            const primitive = valueOf.call(obj);\r\n            if (typeof primitive !== 'object')\r\n                return primitive;\r\n        }\r\n        const toString = obj.toString;\r\n        if (toString) {\r\n            const primitive = toString.call(obj);\r\n            if (typeof primitive !== 'object')\r\n                return primitive;\r\n        }\r\n        throw new TypeError('Cannot convert object to primitive value');\r\n    }\r\n    static __toNumeric(value) {\r\n        if (JSBI.__isBigInt(value))\r\n            return value;\r\n        return +value;\r\n    }\r\n    static __isBigInt(value) {\r\n        return (typeof value === 'object' && value !== null && value.constructor === JSBI);\r\n    }\r\n    static __truncateToNBits(n, x) {\r\n        const neededDigits = ((n + 29) / 30) | 0;\r\n        const result = new JSBI(neededDigits, x.sign);\r\n        const last = neededDigits - 1;\r\n        for (let i = 0; i < last; i++) {\r\n            result.__setDigit(i, x.__digit(i));\r\n        }\r\n        let msd = x.__digit(last);\r\n        if (n % 30 !== 0) {\r\n            const drop = 32 - (n % 30);\r\n            msd = (msd << drop) >>> drop;\r\n        }\r\n        result.__setDigit(last, msd);\r\n        return result.__trim();\r\n    }\r\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\r\n        const neededDigits = ((n + 29) / 30) | 0;\r\n        const result = new JSBI(neededDigits, resultSign);\r\n        let i = 0;\r\n        const last = neededDigits - 1;\r\n        let borrow = 0;\r\n        const limit = Math.min(last, x.length);\r\n        for (; i < limit; i++) {\r\n            const r = 0 - x.__digit(i) - borrow;\r\n            borrow = (r >>> 30) & 1;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        for (; i < last; i++) {\r\n            result.__setDigit(i, (-borrow & 0x3fffffff) | 0);\r\n        }\r\n        let msd = last < x.length ? x.__digit(last) : 0;\r\n        const msdBitsConsumed = n % 30;\r\n        let resultMsd;\r\n        if (msdBitsConsumed === 0) {\r\n            resultMsd = 0 - msd - borrow;\r\n            resultMsd &= 0x3fffffff;\r\n        }\r\n        else {\r\n            const drop = 32 - msdBitsConsumed;\r\n            msd = (msd << drop) >>> drop;\r\n            const minuendMsd = 1 << (32 - drop);\r\n            resultMsd = minuendMsd - msd - borrow;\r\n            resultMsd &= minuendMsd - 1;\r\n        }\r\n        result.__setDigit(last, resultMsd);\r\n        return result.__trim();\r\n    }\r\n    // Digit helpers.\r\n    __digit(i) {\r\n        return this[i];\r\n    }\r\n    __unsignedDigit(i) {\r\n        return this[i] >>> 0;\r\n    }\r\n    __setDigit(i, digit) {\r\n        this[i] = digit | 0;\r\n    }\r\n    __setDigitGrow(i, digit) {\r\n        this[i] = digit | 0;\r\n    }\r\n    __halfDigitLength() {\r\n        const len = this.length;\r\n        if (this.__unsignedDigit(len - 1) <= 0x7fff)\r\n            return len * 2 - 1;\r\n        return len * 2;\r\n    }\r\n    __halfDigit(i) {\r\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7fff;\r\n    }\r\n    __setHalfDigit(i, value) {\r\n        const digitIndex = i >>> 1;\r\n        const previous = this.__digit(digitIndex);\r\n        const updated = i & 1\r\n            ? (previous & 0x7fff) | (value << 15)\r\n            : (previous & 0x3fff8000) | (value & 0x7fff);\r\n        this.__setDigit(digitIndex, updated);\r\n    }\r\n    static __digitPow(base, exponent) {\r\n        let result = 1;\r\n        while (exponent > 0) {\r\n            if (exponent & 1)\r\n                result *= base;\r\n            exponent >>>= 1;\r\n            base *= base;\r\n        }\r\n        return result;\r\n    }\r\n    static __isOneDigitInt(x) {\r\n        // https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-numberbitwiseop\r\n        // https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toint32\r\n        // https://juejin.cn/post/6922902969029492743#comment\r\n        // js的位运算，会把不是number类型的转换成number类型，不是整数的浮点数，floor取整整数，并且只取int32部分运算\r\n        // 因此，下面的操作是说：if x不是小于2^32的整数，返回false\r\n        return (x & 0x3fffffff) === x;\r\n    }\r\n}\r\nJSBI.__kMaxLength = 1 << 25; // 相当于2的25次方\r\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5; // 相当于2的30次方\r\n// Lookup table for the maximum number of bits required per character of a\r\n// base-N string representation of a number. To increase accuracy, the array\r\n// value is the actual value multiplied by 32. To generate this table:\r\n//\r\n// for (let i = 0; i <= 36; i++) {\r\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\r\n// }\r\nJSBI.__kMaxBitsPerChar = [\r\n    0,\r\n    0,\r\n    32,\r\n    51,\r\n    64,\r\n    75,\r\n    83,\r\n    90,\r\n    96,\r\n    102,\r\n    107,\r\n    111,\r\n    115,\r\n    119,\r\n    122,\r\n    126,\r\n    128,\r\n    131,\r\n    134,\r\n    136,\r\n    139,\r\n    141,\r\n    143,\r\n    145,\r\n    147,\r\n    149,\r\n    151,\r\n    153,\r\n    154,\r\n    156,\r\n    158,\r\n    159,\r\n    160,\r\n    162,\r\n    163,\r\n    165,\r\n    166, // 33..36\r\n];\r\nJSBI.__kBitsPerCharTableShift = 5;\r\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\r\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\r\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\r\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\r\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\r\n// For IE11 compatibility.\r\n// Note that the custom replacements are tailored for JSBI's needs, and as\r\n// such are not reusable as general-purpose polyfills.\r\nJSBI.__clz30 = Math.clz32\r\n    ? function (x) {\r\n        return Math.clz32(x) - 2;\r\n    }\r\n    : function (x) {\r\n        if (x === 0)\r\n            return 30;\r\n        return (29 - ((Math.log(x >>> 0) / Math.LN2) | 0)) | 0;\r\n    };\r\nJSBI.__imul = Math.imul ||\r\n    function (a, b) {\r\n        return (a * b) | 0;\r\n    };\r\nexport default JSBI;\r\n//# sourceMappingURL=jsbi.js.map"],"names":[],"mappings":"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"}