{"version":3,"file":"jsbi-umd.js","sources":["../tsc-out/jsbi.mjs"],"sourcesContent":["// Copyright 2018 Google Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the “License”);\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n// <https://apache.org/licenses/LICENSE-2.0>.\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an “AS IS” BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nclass JSBI extends Array {\r\n    constructor(length, sign) {\r\n        super(length);\r\n        this.sign = sign;\r\n        // Explicitly set the prototype as per\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, JSBI.prototype);\r\n        // 相当于 this.__proto__ = JSBI.prototype\r\n        // 因为是拓展原生Array，避免浏览器兼容性问题，强制指明 this.__proto__ = JSBI.prototype\r\n        if (length > JSBI.__kMaxLength) {\r\n            throw new RangeError('Maximum BigInt size exceeded');\r\n        }\r\n    }\r\n    static BigInt(arg) {\r\n        if (typeof arg === 'number') {\r\n            if (arg === 0)\r\n                return JSBI.__zero();\r\n            if (JSBI.__isOneDigitInt(arg)) {\r\n                if (arg < 0) {\r\n                    return JSBI.__oneDigit(-arg, true);\r\n                }\r\n                return JSBI.__oneDigit(arg, false);\r\n            }\r\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\r\n                throw new RangeError('The number ' +\r\n                    arg +\r\n                    ' cannot be converted to ' +\r\n                    'BigInt because it is not an integer');\r\n            }\r\n            return JSBI.__fromDouble(arg);\r\n        }\r\n        else if (typeof arg === 'string') {\r\n            const result = JSBI.__fromString(arg);\r\n            if (result === null) {\r\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\r\n            }\r\n            return result;\r\n        }\r\n        else if (typeof arg === 'boolean') {\r\n            if (arg === true) {\r\n                return JSBI.__oneDigit(1, false);\r\n            }\r\n            return JSBI.__zero();\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            if (arg.constructor === JSBI)\r\n                return arg;\r\n            const primitive = JSBI.__toPrimitive(arg);\r\n            return JSBI.BigInt(primitive);\r\n        }\r\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\r\n    }\r\n    toDebugString() {\r\n        const result = ['BigInt['];\r\n        for (const digit of this) {\r\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\r\n        }\r\n        result.push(']');\r\n        return result.join('');\r\n    }\r\n    toString(radix = 10) {\r\n        if (radix < 2 || radix > 36) {\r\n            throw new RangeError('toString() radix argument must be between 2 and 36');\r\n        }\r\n        if (this.length === 0)\r\n            return '0';\r\n        if ((radix & (radix - 1)) === 0) {\r\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\r\n        }\r\n        return JSBI.__toStringGeneric(this, radix, false);\r\n    }\r\n    valueOf() {\r\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\r\n    }\r\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\r\n    // TODO: add more tests\r\n    static toNumber(x) {\r\n        const xLength = x.length;\r\n        if (xLength === 0)\r\n            return 0;\r\n        if (xLength === 1) {\r\n            const value = x.__unsignedDigit(0);\r\n            return x.sign ? -value : value;\r\n        }\r\n        const xMsd = x.__digit(xLength - 1);\r\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\r\n        const xBitLength = xLength * 30 - msdLeadingZeros;\r\n        if (xBitLength > 1024)\r\n            return x.sign ? -Infinity : Infinity;\r\n        let exponent = xBitLength - 1;\r\n        let currentDigit = xMsd;\r\n        let digitIndex = xLength - 1;\r\n        const shift = msdLeadingZeros + 3;\r\n        let mantissaHigh = shift === 32 ? 0 : currentDigit << shift;\r\n        mantissaHigh >>>= 12;\r\n        const mantissaHighBitsUnset = shift - 12;\r\n        let mantissaLow = shift >= 12 ? 0 : currentDigit << (20 + shift);\r\n        let mantissaLowBitsUnset = 20 + shift;\r\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\r\n            digitIndex--;\r\n            currentDigit = x.__digit(digitIndex);\r\n            mantissaHigh |= currentDigit >>> (30 - mantissaHighBitsUnset);\r\n            mantissaLow = currentDigit << (mantissaHighBitsUnset + 2);\r\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\r\n        }\r\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\r\n            digitIndex--;\r\n            currentDigit = x.__digit(digitIndex);\r\n            if (mantissaLowBitsUnset >= 30) {\r\n                mantissaLow |= currentDigit << (mantissaLowBitsUnset - 30);\r\n            }\r\n            else {\r\n                mantissaLow |= currentDigit >>> (30 - mantissaLowBitsUnset);\r\n            }\r\n            mantissaLowBitsUnset -= 30;\r\n        }\r\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\r\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\r\n            mantissaLow = (mantissaLow + 1) >>> 0;\r\n            if (mantissaLow === 0) {\r\n                // Incrementing mantissaLow overflowed.\r\n                mantissaHigh++;\r\n                if (mantissaHigh >>> 20 !== 0) {\r\n                    // Incrementing mantissaHigh overflowed.\r\n                    mantissaHigh = 0;\r\n                    exponent++;\r\n                    if (exponent > 1023) {\r\n                        // Incrementing the exponent overflowed.\r\n                        return x.sign ? -Infinity : Infinity;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const signBit = x.sign ? 1 << 31 : 0;\r\n        exponent = (exponent + 0x3ff) << 20;\r\n        JSBI.__kBitConversionInts[1] = signBit | exponent | mantissaHigh;\r\n        JSBI.__kBitConversionInts[0] = mantissaLow;\r\n        return JSBI.__kBitConversionDouble[0];\r\n    }\r\n    // Operations.\r\n    static unaryMinus(x) {\r\n        if (x.length === 0)\r\n            return x;\r\n        const result = x.__copy();\r\n        result.sign = !x.sign;\r\n        return result;\r\n    }\r\n    static bitwiseNot(x) {\r\n        if (x.sign) {\r\n            // ~(-x) == ~(~(x-1)) == x-1\r\n            return JSBI.__absoluteSubOne(x).__trim();\r\n        }\r\n        // ~x == -x-1 == -(x+1)\r\n        return JSBI.__absoluteAddOne(x, true);\r\n    }\r\n    static exponentiate(x, y) {\r\n        if (y.sign) {\r\n            throw new RangeError('Exponent must be positive');\r\n        }\r\n        if (y.length === 0) {\r\n            return JSBI.__oneDigit(1, false);\r\n        }\r\n        if (x.length === 0)\r\n            return x;\r\n        if (x.length === 1 && x.__digit(0) === 1) {\r\n            // (-1) ** even_number == 1.\r\n            if (x.sign && (y.__digit(0) & 1) === 0) {\r\n                return JSBI.unaryMinus(x);\r\n            }\r\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\r\n            return x;\r\n        }\r\n        // For all bases >= 2, very large exponents would lead to unrepresentable\r\n        // results.\r\n        if (y.length > 1)\r\n            throw new RangeError('BigInt too big');\r\n        let expValue = y.__unsignedDigit(0);\r\n        if (expValue === 1)\r\n            return x;\r\n        if (expValue >= JSBI.__kMaxLengthBits) {\r\n            throw new RangeError('BigInt too big');\r\n        }\r\n        if (x.length === 1 && x.__digit(0) === 2) {\r\n            // Fast path for 2^n.\r\n            const neededDigits = 1 + ((expValue / 30) | 0);\r\n            const sign = x.sign && (expValue & 1) !== 0;\r\n            const result = new JSBI(neededDigits, sign);\r\n            result.__initializeDigits();\r\n            // All bits are zero. Now set the n-th bit.\r\n            const msd = 1 << expValue % 30;\r\n            result.__setDigit(neededDigits - 1, msd);\r\n            return result;\r\n        }\r\n        let result = null;\r\n        let runningSquare = x;\r\n        // This implicitly sets the result's sign correctly.\r\n        if ((expValue & 1) !== 0)\r\n            result = x;\r\n        expValue >>= 1;\r\n        for (; expValue !== 0; expValue >>= 1) {\r\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\r\n            if ((expValue & 1) !== 0) {\r\n                if (result === null) {\r\n                    result = runningSquare;\r\n                }\r\n                else {\r\n                    result = JSBI.multiply(result, runningSquare);\r\n                }\r\n            }\r\n        }\r\n        // TODO see if there's a way for tsc to infer this will always happen?\r\n        return result;\r\n    }\r\n    static multiply(x, y) {\r\n        if (x.length === 0)\r\n            return x;\r\n        if (y.length === 0)\r\n            return y;\r\n        let resultLength = x.length + y.length;\r\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\r\n            resultLength--;\r\n        }\r\n        const result = new JSBI(resultLength, x.sign !== y.sign);\r\n        result.__initializeDigits();\r\n        for (let i = 0; i < x.length; i++) {\r\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static divide(x, y) {\r\n        if (y.length === 0)\r\n            throw new RangeError('Division by zero');\r\n        if (JSBI.__absoluteCompare(x, y) < 0)\r\n            return JSBI.__zero();\r\n        const resultSign = x.sign !== y.sign;\r\n        const divisor = y.__unsignedDigit(0);\r\n        let quotient;\r\n        if (y.length === 1 && divisor <= 0x7fff) {\r\n            if (divisor === 1) {\r\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\r\n            }\r\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\r\n        }\r\n        else {\r\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\r\n        }\r\n        quotient.sign = resultSign;\r\n        return quotient.__trim();\r\n    }\r\n    static remainder(x, y) {\r\n        if (y.length === 0)\r\n            throw new RangeError('Division by zero');\r\n        if (JSBI.__absoluteCompare(x, y) < 0)\r\n            return x;\r\n        const divisor = y.__unsignedDigit(0);\r\n        if (y.length === 1 && divisor <= 0x7fff) {\r\n            if (divisor === 1)\r\n                return JSBI.__zero();\r\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\r\n            if (remainderDigit === 0)\r\n                return JSBI.__zero();\r\n            return JSBI.__oneDigit(remainderDigit, x.sign);\r\n        }\r\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\r\n        remainder.sign = x.sign;\r\n        return remainder.__trim();\r\n    }\r\n    static add(x, y) {\r\n        const sign = x.sign;\r\n        if (sign === y.sign) {\r\n            // x + y == x + y\r\n            // -x + -y == -(x + y)\r\n            return JSBI.__absoluteAdd(x, y, sign);\r\n        }\r\n        // x + -y == x - y == -(y - x)\r\n        // -x + y == y - x == -(x - y)\r\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\r\n            return JSBI.__absoluteSub(x, y, sign);\r\n        }\r\n        return JSBI.__absoluteSub(y, x, !sign);\r\n    }\r\n    static subtract(x, y) {\r\n        const sign = x.sign;\r\n        if (sign !== y.sign) {\r\n            // x - (-y) == x + y\r\n            // (-x) - y == -(x + y)\r\n            return JSBI.__absoluteAdd(x, y, sign);\r\n        }\r\n        // x - y == -(y - x)\r\n        // (-x) - (-y) == y - x == -(x - y)\r\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\r\n            return JSBI.__absoluteSub(x, y, sign);\r\n        }\r\n        return JSBI.__absoluteSub(y, x, !sign);\r\n    }\r\n    static leftShift(x, y) {\r\n        if (y.length === 0 || x.length === 0)\r\n            return x;\r\n        if (y.sign)\r\n            return JSBI.__rightShiftByAbsolute(x, y);\r\n        return JSBI.__leftShiftByAbsolute(x, y);\r\n    }\r\n    static signedRightShift(x, y) {\r\n        if (y.length === 0 || x.length === 0)\r\n            return x;\r\n        if (y.sign)\r\n            return JSBI.__leftShiftByAbsolute(x, y);\r\n        return JSBI.__rightShiftByAbsolute(x, y);\r\n    }\r\n    static unsignedRightShift() {\r\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\r\n    }\r\n    static lessThan(x, y) {\r\n        return JSBI.__compareToBigInt(x, y) < 0;\r\n    }\r\n    static lessThanOrEqual(x, y) {\r\n        return JSBI.__compareToBigInt(x, y) <= 0;\r\n    }\r\n    static greaterThan(x, y) {\r\n        return JSBI.__compareToBigInt(x, y) > 0;\r\n    }\r\n    static greaterThanOrEqual(x, y) {\r\n        return JSBI.__compareToBigInt(x, y) >= 0;\r\n    }\r\n    static equal(x, y) {\r\n        if (x.sign !== y.sign)\r\n            return false;\r\n        if (x.length !== y.length)\r\n            return false;\r\n        for (let i = 0; i < x.length; i++) {\r\n            if (x.__digit(i) !== y.__digit(i))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    static notEqual(x, y) {\r\n        return !JSBI.equal(x, y);\r\n    }\r\n    static bitwiseAnd(x, y) {\r\n        if (!x.sign && !y.sign) {\r\n            return JSBI.__absoluteAnd(x, y).__trim();\r\n        }\r\n        else if (x.sign && y.sign) {\r\n            const resultLength = Math.max(x.length, y.length) + 1;\r\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\r\n            // == -(((x-1) | (y-1)) + 1)\r\n            let result = JSBI.__absoluteSubOne(x, resultLength);\r\n            const y1 = JSBI.__absoluteSubOne(y);\r\n            result = JSBI.__absoluteOr(result, y1, result);\r\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\r\n        }\r\n        // Assume that x is the positive BigInt.\r\n        if (x.sign) {\r\n            [x, y] = [y, x];\r\n        }\r\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\r\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\r\n    }\r\n    static bitwiseXor(x, y) {\r\n        if (!x.sign && !y.sign) {\r\n            return JSBI.__absoluteXor(x, y).__trim();\r\n        }\r\n        else if (x.sign && y.sign) {\r\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\r\n            const resultLength = Math.max(x.length, y.length);\r\n            const result = JSBI.__absoluteSubOne(x, resultLength);\r\n            const y1 = JSBI.__absoluteSubOne(y);\r\n            return JSBI.__absoluteXor(result, y1, result).__trim();\r\n        }\r\n        const resultLength = Math.max(x.length, y.length) + 1;\r\n        // Assume that x is the positive BigInt.\r\n        if (x.sign) {\r\n            [x, y] = [y, x];\r\n        }\r\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\r\n        let result = JSBI.__absoluteSubOne(y, resultLength);\r\n        result = JSBI.__absoluteXor(result, x, result);\r\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\r\n    }\r\n    static bitwiseOr(x, y) {\r\n        const resultLength = Math.max(x.length, y.length);\r\n        if (!x.sign && !y.sign) {\r\n            return JSBI.__absoluteOr(x, y).__trim();\r\n        }\r\n        else if (x.sign && y.sign) {\r\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\r\n            // == -(((x-1) & (y-1)) + 1)\r\n            let result = JSBI.__absoluteSubOne(x, resultLength);\r\n            const y1 = JSBI.__absoluteSubOne(y);\r\n            result = JSBI.__absoluteAnd(result, y1, result);\r\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\r\n        }\r\n        // Assume that x is the positive BigInt.\r\n        if (x.sign) {\r\n            [x, y] = [y, x];\r\n        }\r\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\r\n        let result = JSBI.__absoluteSubOne(y, resultLength);\r\n        result = JSBI.__absoluteAndNot(result, x, result);\r\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\r\n    }\r\n    static asIntN(n, x) {\r\n        if (x.length === 0)\r\n            return x;\r\n        n = Math.floor(n);\r\n        if (n < 0) {\r\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\r\n        }\r\n        if (n === 0)\r\n            return JSBI.__zero();\r\n        // If {x} has less than {n} bits, return it directly.\r\n        if (n >= JSBI.__kMaxLengthBits)\r\n            return x;\r\n        const neededLength = ((n + 29) / 30) | 0;\r\n        if (x.length < neededLength)\r\n            return x;\r\n        const topDigit = x.__unsignedDigit(neededLength - 1);\r\n        const compareDigit = 1 << (n - 1) % 30;\r\n        if (x.length === neededLength && topDigit < compareDigit)\r\n            return x;\r\n        // Otherwise truncate and simulate two's complement.\r\n        const hasBit = (topDigit & compareDigit) === compareDigit;\r\n        if (!hasBit)\r\n            return JSBI.__truncateToNBits(n, x);\r\n        if (!x.sign)\r\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\r\n        if ((topDigit & (compareDigit - 1)) === 0) {\r\n            for (let i = neededLength - 2; i >= 0; i--) {\r\n                if (x.__digit(i) !== 0) {\r\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\r\n                }\r\n            }\r\n            if (x.length === neededLength && topDigit === compareDigit)\r\n                return x;\r\n            return JSBI.__truncateToNBits(n, x);\r\n        }\r\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\r\n    }\r\n    static asUintN(n, x) {\r\n        if (x.length === 0)\r\n            return x;\r\n        n = Math.floor(n);\r\n        if (n < 0) {\r\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\r\n        }\r\n        if (n === 0)\r\n            return JSBI.__zero();\r\n        // If {x} is negative, simulate two's complement representation.\r\n        if (x.sign) {\r\n            if (n > JSBI.__kMaxLengthBits) {\r\n                throw new RangeError('BigInt too big');\r\n            }\r\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\r\n        }\r\n        // If {x} is positive and has up to {n} bits, return it directly.\r\n        if (n >= JSBI.__kMaxLengthBits)\r\n            return x;\r\n        const neededLength = ((n + 29) / 30) | 0;\r\n        if (x.length < neededLength)\r\n            return x;\r\n        const bitsInTopDigit = n % 30;\r\n        if (x.length == neededLength) {\r\n            if (bitsInTopDigit === 0)\r\n                return x;\r\n            const topDigit = x.__digit(neededLength - 1);\r\n            if (topDigit >>> bitsInTopDigit === 0)\r\n                return x;\r\n        }\r\n        // Otherwise, truncate.\r\n        return JSBI.__truncateToNBits(n, x);\r\n    }\r\n    // Operators.\r\n    static ADD(x, y) {\r\n        x = JSBI.__toPrimitive(x);\r\n        y = JSBI.__toPrimitive(y);\r\n        if (typeof x === 'string') {\r\n            if (typeof y !== 'string')\r\n                y = y.toString();\r\n            return x + y;\r\n        }\r\n        if (typeof y === 'string') {\r\n            return x.toString() + y;\r\n        }\r\n        x = JSBI.__toNumeric(x);\r\n        y = JSBI.__toNumeric(y);\r\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\r\n            return JSBI.add(x, y);\r\n        }\r\n        if (typeof x === 'number' && typeof y === 'number') {\r\n            return x + y;\r\n        }\r\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\r\n    }\r\n    static LT(x, y) {\r\n        return JSBI.__compare(x, y, 0);\r\n    }\r\n    static LE(x, y) {\r\n        return JSBI.__compare(x, y, 1);\r\n    }\r\n    static GT(x, y) {\r\n        return JSBI.__compare(x, y, 2);\r\n    }\r\n    static GE(x, y) {\r\n        return JSBI.__compare(x, y, 3);\r\n    }\r\n    static EQ(x, y) {\r\n        while (true) {\r\n            if (JSBI.__isBigInt(x)) {\r\n                if (JSBI.__isBigInt(y))\r\n                    return JSBI.equal(x, y);\r\n                return JSBI.EQ(y, x);\r\n            }\r\n            else if (typeof x === 'number') {\r\n                if (JSBI.__isBigInt(y))\r\n                    return JSBI.__equalToNumber(y, x);\r\n                if (typeof y !== 'object')\r\n                    return x == y;\r\n                y = JSBI.__toPrimitive(y);\r\n            }\r\n            else if (typeof x === 'string') {\r\n                if (JSBI.__isBigInt(y)) {\r\n                    x = JSBI.__fromString(x);\r\n                    if (x === null)\r\n                        return false;\r\n                    return JSBI.equal(x, y);\r\n                }\r\n                if (typeof y !== 'object')\r\n                    return x == y;\r\n                y = JSBI.__toPrimitive(y);\r\n            }\r\n            else if (typeof x === 'boolean') {\r\n                if (JSBI.__isBigInt(y))\r\n                    return JSBI.__equalToNumber(y, +x);\r\n                if (typeof y !== 'object')\r\n                    return x == y;\r\n                y = JSBI.__toPrimitive(y);\r\n            }\r\n            else if (typeof x === 'symbol') {\r\n                if (JSBI.__isBigInt(y))\r\n                    return false;\r\n                if (typeof y !== 'object')\r\n                    return x == y;\r\n                y = JSBI.__toPrimitive(y);\r\n            }\r\n            else if (typeof x === 'object') {\r\n                if (typeof y === 'object' && y.constructor !== JSBI)\r\n                    return x == y;\r\n                x = JSBI.__toPrimitive(x);\r\n            }\r\n            else {\r\n                return x == y;\r\n            }\r\n        }\r\n    }\r\n    static NE(x, y) {\r\n        return !JSBI.EQ(x, y);\r\n    }\r\n    // DataView-related functionality.\r\n    static DataViewGetBigInt64(dataview, byteOffset, littleEndian = false) {\r\n        return JSBI.asIntN(64, JSBI.DataViewGetBigUint64(dataview, byteOffset, littleEndian));\r\n    }\r\n    static DataViewGetBigUint64(dataview, byteOffset, littleEndian = false) {\r\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\r\n        const high = dataview.getUint32(byteOffset + h, littleEndian);\r\n        const low = dataview.getUint32(byteOffset + l, littleEndian);\r\n        const result = new JSBI(3, false);\r\n        result.__setDigit(0, low & 0x3fffffff);\r\n        result.__setDigit(1, ((high & 0xfffffff) << 2) | (low >>> 30));\r\n        result.__setDigit(2, high >>> 28);\r\n        return result.__trim();\r\n    }\r\n    static DataViewSetBigInt64(dataview, byteOffset, value, littleEndian = false) {\r\n        JSBI.DataViewSetBigUint64(dataview, byteOffset, value, littleEndian);\r\n    }\r\n    static DataViewSetBigUint64(dataview, byteOffset, value, littleEndian = false) {\r\n        value = JSBI.asUintN(64, value);\r\n        let high = 0;\r\n        let low = 0;\r\n        if (value.length > 0) {\r\n            low = value.__digit(0);\r\n            if (value.length > 1) {\r\n                const d1 = value.__digit(1);\r\n                low = low | (d1 << 30);\r\n                high = d1 >>> 2;\r\n                if (value.length > 2) {\r\n                    high = high | (value.__digit(2) << 28);\r\n                }\r\n            }\r\n        }\r\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\r\n        dataview.setUint32(byteOffset + h, high, littleEndian);\r\n        dataview.setUint32(byteOffset + l, low, littleEndian);\r\n    }\r\n    // Helpers.\r\n    static __zero() {\r\n        return new JSBI(0, false);\r\n    }\r\n    static __oneDigit(value, sign) {\r\n        const result = new JSBI(1, sign);\r\n        result.__setDigit(0, value); // length = 1 , this.0 = 实际number的值\r\n        return result;\r\n    }\r\n    __copy() {\r\n        const result = new JSBI(this.length, this.sign);\r\n        for (let i = 0; i < this.length; i++) {\r\n            result[i] = this[i];\r\n        }\r\n        return result;\r\n    }\r\n    __trim() {\r\n        let newLength = this.length;\r\n        let last = this[newLength - 1];\r\n        while (last === 0) {\r\n            newLength--;\r\n            last = this[newLength - 1];\r\n            this.pop();\r\n        }\r\n        if (newLength === 0)\r\n            this.sign = false;\r\n        return this;\r\n    }\r\n    __initializeDigits() {\r\n        for (let i = 0; i < this.length; i++) {\r\n            this[i] = 0;\r\n        }\r\n    }\r\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\r\n        if (mantissaBitsUnset > 0)\r\n            return -1;\r\n        let topUnconsumedBit;\r\n        if (mantissaBitsUnset < 0) {\r\n            topUnconsumedBit = -mantissaBitsUnset - 1;\r\n        }\r\n        else {\r\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\r\n            if (digitIndex === 0)\r\n                return -1;\r\n            digitIndex--;\r\n            currentDigit = x.__digit(digitIndex);\r\n            topUnconsumedBit = 29;\r\n        }\r\n        // If the most significant remaining bit is 0, round down.\r\n        let mask = 1 << topUnconsumedBit;\r\n        if ((currentDigit & mask) === 0)\r\n            return -1;\r\n        // If any other remaining bit is set, round up.\r\n        mask -= 1;\r\n        if ((currentDigit & mask) !== 0)\r\n            return 1;\r\n        while (digitIndex > 0) {\r\n            digitIndex--;\r\n            if (x.__digit(digitIndex) !== 0)\r\n                return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    static __fromDouble(value) {\r\n        const sign = value < 0;\r\n        JSBI.__kBitConversionDouble[0] = value;\r\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7ff;\r\n        const exponent = rawExponent - 0x3ff;\r\n        const digits = ((exponent / 30) | 0) + 1;\r\n        const result = new JSBI(digits, sign);\r\n        const kHiddenBit = 0x00100000;\r\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xfffff) | kHiddenBit;\r\n        let mantissaLow = JSBI.__kBitConversionInts[0];\r\n        const kMantissaHighTopBit = 20;\r\n        // 0-indexed position of most significant bit in most significant digit.\r\n        const msdTopBit = exponent % 30;\r\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\r\n        // left (i.e. most significant part).\r\n        let remainingMantissaBits = 0;\r\n        // Next digit under construction.\r\n        let digit;\r\n        // First, build the MSD by shifting the mantissa appropriately.\r\n        if (msdTopBit < kMantissaHighTopBit) {\r\n            const shift = kMantissaHighTopBit - msdTopBit;\r\n            remainingMantissaBits = shift + 32;\r\n            digit = mantissaHigh >>> shift;\r\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\r\n            mantissaLow = mantissaLow << (32 - shift);\r\n        }\r\n        else if (msdTopBit === kMantissaHighTopBit) {\r\n            remainingMantissaBits = 32;\r\n            digit = mantissaHigh;\r\n            mantissaHigh = mantissaLow;\r\n            mantissaLow = 0;\r\n        }\r\n        else {\r\n            const shift = msdTopBit - kMantissaHighTopBit;\r\n            remainingMantissaBits = 32 - shift;\r\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\r\n            mantissaHigh = mantissaLow << shift;\r\n            mantissaLow = 0;\r\n        }\r\n        result.__setDigit(digits - 1, digit);\r\n        // Then fill in the rest of the digits.\r\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\r\n            if (remainingMantissaBits > 0) {\r\n                remainingMantissaBits -= 30;\r\n                digit = mantissaHigh >>> 2;\r\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\r\n                mantissaLow = mantissaLow << 30;\r\n            }\r\n            else {\r\n                digit = 0;\r\n            }\r\n            result.__setDigit(digitIndex, digit);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    // 如其名，判断是否是空白符\r\n    static __isWhitespace(c) {\r\n        if (c <= 0x0d && c >= 0x09)\r\n            return true;\r\n        if (c <= 0x9f)\r\n            return c === 0x20;\r\n        if (c <= 0x01ffff) {\r\n            return c === 0xa0 || c === 0x1680;\r\n        }\r\n        if (c <= 0x02ffff) {\r\n            c &= 0x01ffff;\r\n            return (c <= 0x0a ||\r\n                c === 0x28 ||\r\n                c === 0x29 ||\r\n                c === 0x2f ||\r\n                c === 0x5f ||\r\n                c === 0x1000);\r\n        }\r\n        return c === 0xfeff;\r\n    }\r\n    static __fromString(string, radix = 0) {\r\n        let sign = 0;\r\n        let leadingZero = false;\r\n        const length = string.length;\r\n        let cursor = 0;\r\n        if (cursor === length)\r\n            return JSBI.__zero();\r\n        let current = string.charCodeAt(cursor);\r\n        // Skip whitespace.\r\n        while (JSBI.__isWhitespace(current)) {\r\n            if (++cursor === length)\r\n                return JSBI.__zero();\r\n            current = string.charCodeAt(cursor);\r\n        }\r\n        // Detect radix.\r\n        if (current === 0x2b) {\r\n            // '+'\r\n            if (++cursor === length)\r\n                return null;\r\n            current = string.charCodeAt(cursor);\r\n            sign = 1;\r\n        }\r\n        else if (current === 0x2d) {\r\n            // '-'\r\n            if (++cursor === length)\r\n                return null;\r\n            current = string.charCodeAt(cursor);\r\n            sign = -1;\r\n        }\r\n        if (radix === 0) {\r\n            radix = 10;\r\n            if (current === 0x30) {\r\n                // '0'\r\n                if (++cursor === length)\r\n                    return JSBI.__zero();\r\n                current = string.charCodeAt(cursor);\r\n                if (current === 0x58 || current === 0x78) {\r\n                    // 'X' or 'x'\r\n                    radix = 16;\r\n                    if (++cursor === length)\r\n                        return null;\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                else if (current === 0x4f || current === 0x6f) {\r\n                    // 'O' or 'o'\r\n                    radix = 8;\r\n                    if (++cursor === length)\r\n                        return null;\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                else if (current === 0x42 || current === 0x62) {\r\n                    // 'B' or 'b'\r\n                    radix = 2;\r\n                    if (++cursor === length)\r\n                        return null;\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                else {\r\n                    leadingZero = true;\r\n                }\r\n            }\r\n        }\r\n        else if (radix === 16) {\r\n            if (current === 0x30) {\r\n                // '0'\r\n                // Allow \"0x\" prefix.\r\n                if (++cursor === length)\r\n                    return JSBI.__zero();\r\n                current = string.charCodeAt(cursor);\r\n                if (current === 0x58 || current === 0x78) {\r\n                    // 'X' or 'x'\r\n                    if (++cursor === length)\r\n                        return null;\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                else {\r\n                    leadingZero = true;\r\n                }\r\n            }\r\n        }\r\n        if (sign !== 0 && radix !== 10)\r\n            return null;\r\n        // Skip leading zeros.\r\n        while (current === 0x30) {\r\n            leadingZero = true;\r\n            if (++cursor === length)\r\n                return JSBI.__zero();\r\n            current = string.charCodeAt(cursor);\r\n        }\r\n        // Allocate result.\r\n        const chars = length - cursor;\r\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\r\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\r\n        if (chars > (1 << 30) / bitsPerChar)\r\n            return null;\r\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\r\n        const resultLength = ((bitsMin + 29) / 30) | 0;\r\n        const result = new JSBI(resultLength, false);\r\n        // Parse.\r\n        const limDigit = radix < 10 ? radix : 10;\r\n        const limAlpha = radix > 10 ? radix - 10 : 0;\r\n        if ((radix & (radix - 1)) === 0) {\r\n            // Power-of-two radix.\r\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\r\n            const parts = [];\r\n            const partsBits = [];\r\n            let done = false;\r\n            do {\r\n                let part = 0;\r\n                let bits = 0;\r\n                while (true) {\r\n                    let d;\r\n                    if ((current - 48) >>> 0 < limDigit) {\r\n                        d = current - 48;\r\n                    }\r\n                    else if (((current | 32) - 97) >>> 0 < limAlpha) {\r\n                        d = (current | 32) - 87;\r\n                    }\r\n                    else {\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                    bits += bitsPerChar;\r\n                    part = (part << bitsPerChar) | d;\r\n                    if (++cursor === length) {\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                    current = string.charCodeAt(cursor);\r\n                    if (bits + bitsPerChar > 30)\r\n                        break;\r\n                }\r\n                parts.push(part);\r\n                partsBits.push(bits);\r\n            } while (!done);\r\n            JSBI.__fillFromParts(result, parts, partsBits);\r\n        }\r\n        else {\r\n            result.__initializeDigits();\r\n            let done = false;\r\n            let charsSoFar = 0;\r\n            do {\r\n                let part = 0;\r\n                let multiplier = 1;\r\n                while (true) {\r\n                    let d;\r\n                    if ((current - 48) >>> 0 < limDigit) {\r\n                        d = current - 48;\r\n                    }\r\n                    else if (((current | 32) - 97) >>> 0 < limAlpha) {\r\n                        d = (current | 32) - 87;\r\n                    }\r\n                    else {\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                    const m = multiplier * radix;\r\n                    if (m > 0x3fffffff)\r\n                        break;\r\n                    multiplier = m;\r\n                    part = part * radix + d;\r\n                    charsSoFar++;\r\n                    if (++cursor === length) {\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                    current = string.charCodeAt(cursor);\r\n                }\r\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\r\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\r\n                    JSBI.__kBitsPerCharTableShift) /\r\n                    30) |\r\n                    0;\r\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\r\n            } while (!done);\r\n        }\r\n        if (cursor !== length) {\r\n            if (!JSBI.__isWhitespace(current))\r\n                return null;\r\n            for (cursor++; cursor < length; cursor++) {\r\n                current = string.charCodeAt(cursor);\r\n                if (!JSBI.__isWhitespace(current))\r\n                    return null;\r\n            }\r\n        }\r\n        // Get result.\r\n        result.sign = sign === -1;\r\n        return result.__trim();\r\n    }\r\n    static __fillFromParts(result, parts, partsBits) {\r\n        let digitIndex = 0;\r\n        let digit = 0;\r\n        let bitsInDigit = 0;\r\n        for (let i = parts.length - 1; i >= 0; i--) {\r\n            const part = parts[i];\r\n            const partBits = partsBits[i];\r\n            digit |= part << bitsInDigit;\r\n            bitsInDigit += partBits;\r\n            if (bitsInDigit === 30) {\r\n                result.__setDigit(digitIndex++, digit);\r\n                bitsInDigit = 0;\r\n                digit = 0;\r\n            }\r\n            else if (bitsInDigit > 30) {\r\n                result.__setDigit(digitIndex++, digit & 0x3fffffff);\r\n                bitsInDigit -= 30;\r\n                digit = part >>> (partBits - bitsInDigit);\r\n            }\r\n        }\r\n        if (digit !== 0) {\r\n            if (digitIndex >= result.length)\r\n                throw new Error('implementation bug');\r\n            result.__setDigit(digitIndex++, digit);\r\n        }\r\n        for (; digitIndex < result.length; digitIndex++) {\r\n            result.__setDigit(digitIndex, 0);\r\n        }\r\n    }\r\n    static __toStringBasePowerOfTwo(x, radix) {\r\n        const length = x.length;\r\n        let bits = radix - 1;\r\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\r\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\r\n        bits = ((bits >>> 4) & 0x0f) + (bits & 0x0f);\r\n        const bitsPerChar = bits;\r\n        const charMask = radix - 1;\r\n        const msd = x.__digit(length - 1);\r\n        const msdLeadingZeros = JSBI.__clz30(msd);\r\n        const bitLength = length * 30 - msdLeadingZeros;\r\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\r\n        if (x.sign)\r\n            charsRequired++;\r\n        if (charsRequired > 1 << 28)\r\n            throw new Error('string too long');\r\n        const result = new Array(charsRequired);\r\n        let pos = charsRequired - 1;\r\n        let digit = 0;\r\n        let availableBits = 0;\r\n        for (let i = 0; i < length - 1; i++) {\r\n            const newDigit = x.__digit(i);\r\n            const current = (digit | (newDigit << availableBits)) & charMask;\r\n            result[pos--] = JSBI.__kConversionChars[current];\r\n            const consumedBits = bitsPerChar - availableBits;\r\n            digit = newDigit >>> consumedBits;\r\n            availableBits = 30 - consumedBits;\r\n            while (availableBits >= bitsPerChar) {\r\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\r\n                digit >>>= bitsPerChar;\r\n                availableBits -= bitsPerChar;\r\n            }\r\n        }\r\n        const current = (digit | (msd << availableBits)) & charMask;\r\n        result[pos--] = JSBI.__kConversionChars[current];\r\n        digit = msd >>> (bitsPerChar - availableBits);\r\n        while (digit !== 0) {\r\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\r\n            digit >>>= bitsPerChar;\r\n        }\r\n        if (x.sign)\r\n            result[pos--] = '-';\r\n        if (pos !== -1)\r\n            throw new Error('implementation bug');\r\n        return result.join('');\r\n    }\r\n    static __toStringGeneric(x, radix, isRecursiveCall) {\r\n        const length = x.length;\r\n        if (length === 0)\r\n            return '';\r\n        if (length === 1) {\r\n            let result = x.__unsignedDigit(0).toString(radix);\r\n            if (isRecursiveCall === false && x.sign) {\r\n                result = '-' + result;\r\n            }\r\n            return result;\r\n        }\r\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\r\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\r\n        const minBitsPerChar = maxBitsPerChar - 1;\r\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\r\n        charsRequired += minBitsPerChar - 1;\r\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\r\n        const secondHalfChars = (charsRequired + 1) >> 1;\r\n        // Divide-and-conquer: split by a power of {radix} that's approximately\r\n        // the square root of {x}, then recurse.\r\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\r\n        let quotient;\r\n        let secondHalf;\r\n        const divisor = conqueror.__unsignedDigit(0);\r\n        if (conqueror.length === 1 && divisor <= 0x7fff) {\r\n            quotient = new JSBI(x.length, false);\r\n            quotient.__initializeDigits();\r\n            let remainder = 0;\r\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\r\n                const input = (remainder << 15) | x.__halfDigit(i);\r\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\r\n                remainder = input % divisor | 0;\r\n            }\r\n            secondHalf = remainder.toString(radix);\r\n        }\r\n        else {\r\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\r\n            quotient = divisionResult.quotient;\r\n            const remainder = divisionResult.remainder.__trim();\r\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\r\n        }\r\n        quotient.__trim();\r\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\r\n        while (secondHalf.length < secondHalfChars) {\r\n            secondHalf = '0' + secondHalf;\r\n        }\r\n        if (isRecursiveCall === false && x.sign) {\r\n            firstHalf = '-' + firstHalf;\r\n        }\r\n        return firstHalf + secondHalf;\r\n    }\r\n    static __unequalSign(leftNegative) {\r\n        return leftNegative ? -1 : 1;\r\n    }\r\n    static __absoluteGreater(bothNegative) {\r\n        return bothNegative ? -1 : 1;\r\n    }\r\n    static __absoluteLess(bothNegative) {\r\n        return bothNegative ? 1 : -1;\r\n    }\r\n    static __compareToBigInt(x, y) {\r\n        const xSign = x.sign;\r\n        if (xSign !== y.sign)\r\n            return JSBI.__unequalSign(xSign);\r\n        const result = JSBI.__absoluteCompare(x, y);\r\n        if (result > 0)\r\n            return JSBI.__absoluteGreater(xSign);\r\n        if (result < 0)\r\n            return JSBI.__absoluteLess(xSign);\r\n        return 0;\r\n    }\r\n    static __compareToNumber(x, y) {\r\n        if (JSBI.__isOneDigitInt(y)) {\r\n            const xSign = x.sign;\r\n            const ySign = y < 0;\r\n            if (xSign !== ySign)\r\n                return JSBI.__unequalSign(xSign);\r\n            if (x.length === 0) {\r\n                if (ySign)\r\n                    throw new Error('implementation bug');\r\n                return y === 0 ? 0 : -1;\r\n            }\r\n            // Any multi-digit BigInt is bigger than an int32.\r\n            if (x.length > 1)\r\n                return JSBI.__absoluteGreater(xSign);\r\n            const yAbs = Math.abs(y);\r\n            const xDigit = x.__unsignedDigit(0);\r\n            if (xDigit > yAbs)\r\n                return JSBI.__absoluteGreater(xSign);\r\n            if (xDigit < yAbs)\r\n                return JSBI.__absoluteLess(xSign);\r\n            return 0;\r\n        }\r\n        return JSBI.__compareToDouble(x, y);\r\n    }\r\n    static __compareToDouble(x, y) {\r\n        if (y !== y)\r\n            return y; // NaN.\r\n        if (y === Infinity)\r\n            return -1;\r\n        if (y === -Infinity)\r\n            return 1;\r\n        const xSign = x.sign;\r\n        const ySign = y < 0;\r\n        if (xSign !== ySign)\r\n            return JSBI.__unequalSign(xSign);\r\n        if (y === 0) {\r\n            throw new Error('implementation bug: should be handled elsewhere');\r\n        }\r\n        if (x.length === 0)\r\n            return -1;\r\n        JSBI.__kBitConversionDouble[0] = y;\r\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7ff;\r\n        if (rawExponent === 0x7ff) {\r\n            throw new Error('implementation bug: handled elsewhere');\r\n        }\r\n        const exponent = rawExponent - 0x3ff;\r\n        if (exponent < 0) {\r\n            // The absolute value of y is less than 1. Only 0n has an absolute\r\n            // value smaller than that, but we've already covered that case.\r\n            return JSBI.__absoluteGreater(xSign);\r\n        }\r\n        const xLength = x.length;\r\n        let xMsd = x.__digit(xLength - 1);\r\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\r\n        const xBitLength = xLength * 30 - msdLeadingZeros;\r\n        const yBitLength = exponent + 1;\r\n        if (xBitLength < yBitLength)\r\n            return JSBI.__absoluteLess(xSign);\r\n        if (xBitLength > yBitLength)\r\n            return JSBI.__absoluteGreater(xSign);\r\n        // Same sign, same bit length. Shift mantissa to align with x and compare\r\n        // bit for bit.\r\n        const kHiddenBit = 0x00100000;\r\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xfffff) | kHiddenBit;\r\n        let mantissaLow = JSBI.__kBitConversionInts[0];\r\n        const kMantissaHighTopBit = 20;\r\n        const msdTopBit = 29 - msdLeadingZeros;\r\n        if (msdTopBit !== ((xBitLength - 1) % 30 | 0)) {\r\n            throw new Error('implementation bug');\r\n        }\r\n        let compareMantissa; // Shifted chunk of mantissa.\r\n        let remainingMantissaBits = 0;\r\n        // First, compare most significant digit against beginning of mantissa.\r\n        if (msdTopBit < kMantissaHighTopBit) {\r\n            const shift = kMantissaHighTopBit - msdTopBit;\r\n            remainingMantissaBits = shift + 32;\r\n            compareMantissa = mantissaHigh >>> shift;\r\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\r\n            mantissaLow = mantissaLow << (32 - shift);\r\n        }\r\n        else if (msdTopBit === kMantissaHighTopBit) {\r\n            remainingMantissaBits = 32;\r\n            compareMantissa = mantissaHigh;\r\n            mantissaHigh = mantissaLow;\r\n            mantissaLow = 0;\r\n        }\r\n        else {\r\n            const shift = msdTopBit - kMantissaHighTopBit;\r\n            remainingMantissaBits = 32 - shift;\r\n            compareMantissa =\r\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\r\n            mantissaHigh = mantissaLow << shift;\r\n            mantissaLow = 0;\r\n        }\r\n        xMsd = xMsd >>> 0;\r\n        compareMantissa = compareMantissa >>> 0;\r\n        if (xMsd > compareMantissa)\r\n            return JSBI.__absoluteGreater(xSign);\r\n        if (xMsd < compareMantissa)\r\n            return JSBI.__absoluteLess(xSign);\r\n        // Then, compare additional digits against remaining mantissa bits.\r\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\r\n            if (remainingMantissaBits > 0) {\r\n                remainingMantissaBits -= 30;\r\n                compareMantissa = mantissaHigh >>> 2;\r\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\r\n                mantissaLow = mantissaLow << 30;\r\n            }\r\n            else {\r\n                compareMantissa = 0;\r\n            }\r\n            const digit = x.__unsignedDigit(digitIndex);\r\n            if (digit > compareMantissa)\r\n                return JSBI.__absoluteGreater(xSign);\r\n            if (digit < compareMantissa)\r\n                return JSBI.__absoluteLess(xSign);\r\n        }\r\n        // Integer parts are equal; check whether {y} has a fractional part.\r\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\r\n            if (remainingMantissaBits === 0)\r\n                throw new Error('implementation bug');\r\n            return JSBI.__absoluteLess(xSign);\r\n        }\r\n        return 0;\r\n    }\r\n    static __equalToNumber(x, y) {\r\n        if (JSBI.__isOneDigitInt(y)) {\r\n            if (y === 0)\r\n                return x.length === 0;\r\n            // Any multi-digit BigInt is bigger than an int32.\r\n            return (x.length === 1 &&\r\n                x.sign === y < 0 &&\r\n                x.__unsignedDigit(0) === Math.abs(y));\r\n        }\r\n        return JSBI.__compareToDouble(x, y) === 0;\r\n    }\r\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\r\n    // 0 - lessThan\r\n    // 1 - lessThanOrEqual\r\n    // 2 - greaterThan\r\n    // 3 - greaterThanOrEqual\r\n    static __comparisonResultToBool(result, op) {\r\n        switch (op) {\r\n            case 0:\r\n                return result < 0;\r\n            case 1:\r\n                return result <= 0;\r\n            case 2:\r\n                return result > 0;\r\n            case 3:\r\n                return result >= 0;\r\n        }\r\n    }\r\n    static __compare(x, y, op) {\r\n        x = JSBI.__toPrimitive(x);\r\n        y = JSBI.__toPrimitive(y);\r\n        if (typeof x === 'string' && typeof y === 'string') {\r\n            switch (op) {\r\n                case 0:\r\n                    return x < y;\r\n                case 1:\r\n                    return x <= y;\r\n                case 2:\r\n                    return x > y;\r\n                case 3:\r\n                    return x >= y;\r\n            }\r\n        }\r\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\r\n            y = JSBI.__fromString(y);\r\n            if (y === null)\r\n                return false;\r\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\r\n        }\r\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\r\n            x = JSBI.__fromString(x);\r\n            if (x === null)\r\n                return false;\r\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\r\n        }\r\n        x = JSBI.__toNumeric(x);\r\n        y = JSBI.__toNumeric(y);\r\n        if (JSBI.__isBigInt(x)) {\r\n            if (JSBI.__isBigInt(y)) {\r\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\r\n            }\r\n            if (typeof y !== 'number')\r\n                throw new Error('implementation bug');\r\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\r\n        }\r\n        if (typeof x !== 'number')\r\n            throw new Error('implementation bug');\r\n        if (JSBI.__isBigInt(y)) {\r\n            // Note that \"op ^ 2\" reverses the op's direction.\r\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\r\n        }\r\n        if (typeof y !== 'number')\r\n            throw new Error('implementation bug');\r\n        switch (op) {\r\n            case 0:\r\n                return x < y;\r\n            case 1:\r\n                return x <= y;\r\n            case 2:\r\n                return x > y;\r\n            case 3:\r\n                return x >= y;\r\n        }\r\n    }\r\n    __clzmsd() {\r\n        return JSBI.__clz30(this.__digit(this.length - 1));\r\n    }\r\n    static __absoluteAdd(x, y, resultSign) {\r\n        if (x.length < y.length)\r\n            return JSBI.__absoluteAdd(y, x, resultSign);\r\n        if (x.length === 0)\r\n            return x;\r\n        if (y.length === 0)\r\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\r\n        let resultLength = x.length;\r\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\r\n            resultLength++;\r\n        }\r\n        const result = new JSBI(resultLength, resultSign);\r\n        let carry = 0;\r\n        let i = 0;\r\n        for (; i < y.length; i++) {\r\n            const r = x.__digit(i) + y.__digit(i) + carry;\r\n            carry = r >>> 30;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        for (; i < x.length; i++) {\r\n            const r = x.__digit(i) + carry;\r\n            carry = r >>> 30;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        if (i < result.length) {\r\n            result.__setDigit(i, carry);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static __absoluteSub(x, y, resultSign) {\r\n        if (x.length === 0)\r\n            return x;\r\n        if (y.length === 0)\r\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\r\n        const result = new JSBI(x.length, resultSign);\r\n        let borrow = 0;\r\n        let i = 0;\r\n        for (; i < y.length; i++) {\r\n            const r = x.__digit(i) - y.__digit(i) - borrow;\r\n            borrow = (r >>> 30) & 1;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        for (; i < x.length; i++) {\r\n            const r = x.__digit(i) - borrow;\r\n            borrow = (r >>> 30) & 1;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static __absoluteAddOne(x, sign, result = null) {\r\n        const inputLength = x.length;\r\n        if (result === null) {\r\n            result = new JSBI(inputLength, sign);\r\n        }\r\n        else {\r\n            result.sign = sign;\r\n        }\r\n        let carry = 1;\r\n        for (let i = 0; i < inputLength; i++) {\r\n            const r = x.__digit(i) + carry;\r\n            carry = r >>> 30;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        if (carry !== 0) {\r\n            result.__setDigitGrow(inputLength, 1);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteSubOne(x, resultLength) {\r\n        const length = x.length;\r\n        resultLength = resultLength || length;\r\n        const result = new JSBI(resultLength, false);\r\n        let borrow = 1;\r\n        for (let i = 0; i < length; i++) {\r\n            const r = x.__digit(i) - borrow;\r\n            borrow = (r >>> 30) & 1;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        if (borrow !== 0)\r\n            throw new Error('implementation bug');\r\n        for (let i = length; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteAnd(x, y, result = null) {\r\n        let xLength = x.length;\r\n        let yLength = y.length;\r\n        let numPairs = yLength;\r\n        if (xLength < yLength) {\r\n            numPairs = xLength;\r\n            const tmp = x;\r\n            const tmpLength = xLength;\r\n            x = y;\r\n            xLength = yLength;\r\n            y = tmp;\r\n            yLength = tmpLength;\r\n        }\r\n        let resultLength = numPairs;\r\n        if (result === null) {\r\n            result = new JSBI(resultLength, false);\r\n        }\r\n        else {\r\n            resultLength = result.length;\r\n        }\r\n        let i = 0;\r\n        for (; i < numPairs; i++) {\r\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\r\n        }\r\n        for (; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteAndNot(x, y, result = null) {\r\n        const xLength = x.length;\r\n        const yLength = y.length;\r\n        let numPairs = yLength;\r\n        if (xLength < yLength) {\r\n            numPairs = xLength;\r\n        }\r\n        let resultLength = xLength;\r\n        if (result === null) {\r\n            result = new JSBI(resultLength, false);\r\n        }\r\n        else {\r\n            resultLength = result.length;\r\n        }\r\n        let i = 0;\r\n        for (; i < numPairs; i++) {\r\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\r\n        }\r\n        for (; i < xLength; i++) {\r\n            result.__setDigit(i, x.__digit(i));\r\n        }\r\n        for (; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteOr(x, y, result = null) {\r\n        let xLength = x.length;\r\n        let yLength = y.length;\r\n        let numPairs = yLength;\r\n        if (xLength < yLength) {\r\n            numPairs = xLength;\r\n            const tmp = x;\r\n            const tmpLength = xLength;\r\n            x = y;\r\n            xLength = yLength;\r\n            y = tmp;\r\n            yLength = tmpLength;\r\n        }\r\n        let resultLength = xLength;\r\n        if (result === null) {\r\n            result = new JSBI(resultLength, false);\r\n        }\r\n        else {\r\n            resultLength = result.length;\r\n        }\r\n        let i = 0;\r\n        for (; i < numPairs; i++) {\r\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\r\n        }\r\n        for (; i < xLength; i++) {\r\n            result.__setDigit(i, x.__digit(i));\r\n        }\r\n        for (; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteXor(x, y, result = null) {\r\n        let xLength = x.length;\r\n        let yLength = y.length;\r\n        let numPairs = yLength;\r\n        if (xLength < yLength) {\r\n            numPairs = xLength;\r\n            const tmp = x;\r\n            const tmpLength = xLength;\r\n            x = y;\r\n            xLength = yLength;\r\n            y = tmp;\r\n            yLength = tmpLength;\r\n        }\r\n        let resultLength = xLength;\r\n        if (result === null) {\r\n            result = new JSBI(resultLength, false);\r\n        }\r\n        else {\r\n            resultLength = result.length;\r\n        }\r\n        let i = 0;\r\n        for (; i < numPairs; i++) {\r\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\r\n        }\r\n        for (; i < xLength; i++) {\r\n            result.__setDigit(i, x.__digit(i));\r\n        }\r\n        for (; i < resultLength; i++) {\r\n            result.__setDigit(i, 0);\r\n        }\r\n        return result;\r\n    }\r\n    static __absoluteCompare(x, y) {\r\n        const diff = x.length - y.length;\r\n        if (diff !== 0)\r\n            return diff;\r\n        let i = x.length - 1;\r\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\r\n            i--;\r\n        if (i < 0)\r\n            return 0;\r\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\r\n    }\r\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\r\n        if (multiplier === 0)\r\n            return;\r\n        const m2Low = multiplier & 0x7fff;\r\n        const m2High = multiplier >>> 15;\r\n        let carry = 0;\r\n        let high = 0;\r\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\r\n            let acc = accumulator.__digit(accumulatorIndex);\r\n            const m1 = multiplicand.__digit(i);\r\n            const m1Low = m1 & 0x7fff;\r\n            const m1High = m1 >>> 15;\r\n            const rLow = JSBI.__imul(m1Low, m2Low);\r\n            const rMid1 = JSBI.__imul(m1Low, m2High);\r\n            const rMid2 = JSBI.__imul(m1High, m2Low);\r\n            const rHigh = JSBI.__imul(m1High, m2High);\r\n            acc += high + rLow + carry;\r\n            carry = acc >>> 30;\r\n            acc &= 0x3fffffff;\r\n            acc += ((rMid1 & 0x7fff) << 15) + ((rMid2 & 0x7fff) << 15);\r\n            carry += acc >>> 30;\r\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\r\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3fffffff);\r\n        }\r\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\r\n            let acc = accumulator.__digit(accumulatorIndex);\r\n            acc += carry + high;\r\n            high = 0;\r\n            carry = acc >>> 30;\r\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3fffffff);\r\n        }\r\n    }\r\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\r\n        let carry = summand;\r\n        let high = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            const digit = source.__digit(i);\r\n            const rx = JSBI.__imul(digit & 0x7fff, factor);\r\n            const ry = JSBI.__imul(digit >>> 15, factor);\r\n            const r = rx + ((ry & 0x7fff) << 15) + high + carry;\r\n            carry = r >>> 30;\r\n            high = ry >>> 15;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        if (result.length > n) {\r\n            result.__setDigit(n++, carry + high);\r\n            while (n < result.length) {\r\n                result.__setDigit(n++, 0);\r\n            }\r\n        }\r\n        else {\r\n            if (carry + high !== 0)\r\n                throw new Error('implementation bug');\r\n        }\r\n    }\r\n    __inplaceMultiplyAdd(multiplier, summand, length) {\r\n        if (length > this.length)\r\n            length = this.length;\r\n        const mLow = multiplier & 0x7fff;\r\n        const mHigh = multiplier >>> 15;\r\n        let carry = 0;\r\n        let high = summand;\r\n        for (let i = 0; i < length; i++) {\r\n            const d = this.__digit(i);\r\n            const dLow = d & 0x7fff;\r\n            const dHigh = d >>> 15;\r\n            const pLow = JSBI.__imul(dLow, mLow);\r\n            const pMid1 = JSBI.__imul(dLow, mHigh);\r\n            const pMid2 = JSBI.__imul(dHigh, mLow);\r\n            const pHigh = JSBI.__imul(dHigh, mHigh);\r\n            let result = high + pLow + carry;\r\n            carry = result >>> 30;\r\n            result &= 0x3fffffff;\r\n            result += ((pMid1 & 0x7fff) << 15) + ((pMid2 & 0x7fff) << 15);\r\n            carry += result >>> 30;\r\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\r\n            this.__setDigit(i, result & 0x3fffffff);\r\n        }\r\n        if (carry !== 0 || high !== 0) {\r\n            throw new Error('implementation bug');\r\n        }\r\n    }\r\n    static __absoluteDivSmall(x, divisor, quotient = null) {\r\n        if (quotient === null)\r\n            quotient = new JSBI(x.length, false);\r\n        let remainder = 0;\r\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\r\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\r\n            const upperHalf = (input / divisor) | 0;\r\n            remainder = input % divisor | 0;\r\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\r\n            const lowerHalf = (input / divisor) | 0;\r\n            remainder = input % divisor | 0;\r\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\r\n        }\r\n        return quotient;\r\n    }\r\n    static __absoluteModSmall(x, divisor) {\r\n        let remainder = 0;\r\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\r\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\r\n            remainder = input % divisor | 0;\r\n        }\r\n        return remainder;\r\n    }\r\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\r\n        const n = divisor.__halfDigitLength();\r\n        const n2 = divisor.length;\r\n        const m = dividend.__halfDigitLength() - n;\r\n        let q = null;\r\n        if (wantQuotient) {\r\n            q = new JSBI((m + 2) >>> 1, false);\r\n            q.__initializeDigits();\r\n        }\r\n        const qhatv = new JSBI((n + 2) >>> 1, false);\r\n        qhatv.__initializeDigits();\r\n        // D1.\r\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\r\n        if (shift > 0) {\r\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\r\n        }\r\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\r\n        // D2.\r\n        const vn1 = divisor.__halfDigit(n - 1);\r\n        let halfDigitBuffer = 0;\r\n        for (let j = m; j >= 0; j--) {\r\n            // D3.\r\n            let qhat = 0x7fff;\r\n            const ujn = u.__halfDigit(j + n);\r\n            if (ujn !== vn1) {\r\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\r\n                qhat = (input / vn1) | 0;\r\n                let rhat = input % vn1 | 0;\r\n                const vn2 = divisor.__halfDigit(n - 2);\r\n                const ujn2 = u.__halfDigit(j + n - 2);\r\n                while (JSBI.__imul(qhat, vn2) >>> 0 > ((rhat << 16) | ujn2) >>> 0) {\r\n                    qhat--;\r\n                    rhat += vn1;\r\n                    if (rhat > 0x7fff)\r\n                        break;\r\n                }\r\n            }\r\n            // D4.\r\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\r\n            let c = u.__inplaceSub(qhatv, j, n + 1);\r\n            if (c !== 0) {\r\n                c = u.__inplaceAdd(divisor, j, n);\r\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7fff);\r\n                qhat--;\r\n            }\r\n            if (wantQuotient) {\r\n                if (j & 1) {\r\n                    halfDigitBuffer = qhat << 15;\r\n                }\r\n                else {\r\n                    // TODO make this statically determinable\r\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\r\n                }\r\n            }\r\n        }\r\n        if (wantRemainder) {\r\n            u.__inplaceRightShift(shift);\r\n            if (wantQuotient) {\r\n                return { quotient: q, remainder: u };\r\n            }\r\n            return u;\r\n        }\r\n        if (wantQuotient)\r\n            return q;\r\n        // TODO find a way to make this statically unreachable?\r\n        throw new Error('unreachable');\r\n    }\r\n    static __clz15(value) {\r\n        return JSBI.__clz30(value) - 15;\r\n    }\r\n    // TODO: work on full digits, like __inplaceSub?\r\n    __inplaceAdd(summand, startIndex, halfDigits) {\r\n        let carry = 0;\r\n        for (let i = 0; i < halfDigits; i++) {\r\n            const sum = this.__halfDigit(startIndex + i) + summand.__halfDigit(i) + carry;\r\n            carry = sum >>> 15;\r\n            this.__setHalfDigit(startIndex + i, sum & 0x7fff);\r\n        }\r\n        return carry;\r\n    }\r\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\r\n        const fullSteps = (halfDigits - 1) >>> 1;\r\n        let borrow = 0;\r\n        if (startIndex & 1) {\r\n            // this:   [..][..][..]\r\n            // subtr.:   [..][..]\r\n            startIndex >>= 1;\r\n            let current = this.__digit(startIndex);\r\n            let r0 = current & 0x7fff;\r\n            let i = 0;\r\n            for (; i < fullSteps; i++) {\r\n                const sub = subtrahend.__digit(i);\r\n                const r15 = (current >>> 15) - (sub & 0x7fff) - borrow;\r\n                borrow = (r15 >>> 15) & 1;\r\n                this.__setDigit(startIndex + i, ((r15 & 0x7fff) << 15) | (r0 & 0x7fff));\r\n                current = this.__digit(startIndex + i + 1);\r\n                r0 = (current & 0x7fff) - (sub >>> 15) - borrow;\r\n                borrow = (r0 >>> 15) & 1;\r\n            }\r\n            // Unrolling the last iteration gives a 5% performance benefit!\r\n            const sub = subtrahend.__digit(i);\r\n            const r15 = (current >>> 15) - (sub & 0x7fff) - borrow;\r\n            borrow = (r15 >>> 15) & 1;\r\n            this.__setDigit(startIndex + i, ((r15 & 0x7fff) << 15) | (r0 & 0x7fff));\r\n            const subTop = sub >>> 15;\r\n            if (startIndex + i + 1 >= this.length) {\r\n                throw new RangeError('out of bounds');\r\n            }\r\n            if ((halfDigits & 1) === 0) {\r\n                current = this.__digit(startIndex + i + 1);\r\n                r0 = (current & 0x7fff) - subTop - borrow;\r\n                borrow = (r0 >>> 15) & 1;\r\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3fff8000) | (r0 & 0x7fff));\r\n            }\r\n        }\r\n        else {\r\n            startIndex >>= 1;\r\n            let i = 0;\r\n            for (; i < subtrahend.length - 1; i++) {\r\n                const current = this.__digit(startIndex + i);\r\n                const sub = subtrahend.__digit(i);\r\n                const r0 = (current & 0x7fff) - (sub & 0x7fff) - borrow;\r\n                borrow = (r0 >>> 15) & 1;\r\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\r\n                borrow = (r15 >>> 15) & 1;\r\n                this.__setDigit(startIndex + i, ((r15 & 0x7fff) << 15) | (r0 & 0x7fff));\r\n            }\r\n            const current = this.__digit(startIndex + i);\r\n            const sub = subtrahend.__digit(i);\r\n            const r0 = (current & 0x7fff) - (sub & 0x7fff) - borrow;\r\n            borrow = (r0 >>> 15) & 1;\r\n            let r15 = 0;\r\n            if ((halfDigits & 1) === 0) {\r\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\r\n                borrow = (r15 >>> 15) & 1;\r\n            }\r\n            this.__setDigit(startIndex + i, ((r15 & 0x7fff) << 15) | (r0 & 0x7fff));\r\n        }\r\n        return borrow;\r\n    }\r\n    __inplaceRightShift(shift) {\r\n        if (shift === 0)\r\n            return;\r\n        let carry = this.__digit(0) >>> shift;\r\n        const last = this.length - 1;\r\n        for (let i = 0; i < last; i++) {\r\n            const d = this.__digit(i + 1);\r\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3fffffff) | carry);\r\n            carry = d >>> shift;\r\n        }\r\n        this.__setDigit(last, carry);\r\n    }\r\n    static __specialLeftShift(x, shift, addDigit) {\r\n        const n = x.length;\r\n        const resultLength = n + addDigit;\r\n        const result = new JSBI(resultLength, false);\r\n        if (shift === 0) {\r\n            for (let i = 0; i < n; i++)\r\n                result.__setDigit(i, x.__digit(i));\r\n            if (addDigit > 0)\r\n                result.__setDigit(n, 0);\r\n            return result;\r\n        }\r\n        let carry = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            const d = x.__digit(i);\r\n            result.__setDigit(i, ((d << shift) & 0x3fffffff) | carry);\r\n            carry = d >>> (30 - shift);\r\n        }\r\n        if (addDigit > 0) {\r\n            result.__setDigit(n, carry);\r\n        }\r\n        return result;\r\n    }\r\n    static __leftShiftByAbsolute(x, y) {\r\n        const shift = JSBI.__toShiftAmount(y);\r\n        if (shift < 0)\r\n            throw new RangeError('BigInt too big');\r\n        const digitShift = (shift / 30) | 0;\r\n        const bitsShift = shift % 30;\r\n        const length = x.length;\r\n        const grow = bitsShift !== 0 && x.__digit(length - 1) >>> (30 - bitsShift) !== 0;\r\n        const resultLength = length + digitShift + (grow ? 1 : 0);\r\n        const result = new JSBI(resultLength, x.sign);\r\n        if (bitsShift === 0) {\r\n            let i = 0;\r\n            for (; i < digitShift; i++)\r\n                result.__setDigit(i, 0);\r\n            for (; i < resultLength; i++) {\r\n                result.__setDigit(i, x.__digit(i - digitShift));\r\n            }\r\n        }\r\n        else {\r\n            let carry = 0;\r\n            for (let i = 0; i < digitShift; i++)\r\n                result.__setDigit(i, 0);\r\n            for (let i = 0; i < length; i++) {\r\n                const d = x.__digit(i);\r\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3fffffff) | carry);\r\n                carry = d >>> (30 - bitsShift);\r\n            }\r\n            if (grow) {\r\n                result.__setDigit(length + digitShift, carry);\r\n            }\r\n            else {\r\n                if (carry !== 0)\r\n                    throw new Error('implementation bug');\r\n            }\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static __rightShiftByAbsolute(x, y) {\r\n        const length = x.length;\r\n        const sign = x.sign;\r\n        const shift = JSBI.__toShiftAmount(y);\r\n        if (shift < 0)\r\n            return JSBI.__rightShiftByMaximum(sign);\r\n        const digitShift = (shift / 30) | 0;\r\n        const bitsShift = shift % 30;\r\n        let resultLength = length - digitShift;\r\n        if (resultLength <= 0)\r\n            return JSBI.__rightShiftByMaximum(sign);\r\n        // For negative numbers, round down if any bit was shifted out (so that\r\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\r\n        // and whether itc an cause overflow into a new digit. If we allocate the\r\n        // result large enough up front, it avoids having to do grow it later.\r\n        let mustRoundDown = false;\r\n        if (sign) {\r\n            const mask = (1 << bitsShift) - 1;\r\n            if ((x.__digit(digitShift) & mask) !== 0) {\r\n                mustRoundDown = true;\r\n            }\r\n            else {\r\n                for (let i = 0; i < digitShift; i++) {\r\n                    if (x.__digit(i) !== 0) {\r\n                        mustRoundDown = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\r\n        if (mustRoundDown && bitsShift === 0) {\r\n            // Overflow cannot happen if the most significant digit has unset bits.\r\n            const msd = x.__digit(length - 1);\r\n            const roundingCanOverflow = ~msd === 0;\r\n            if (roundingCanOverflow)\r\n                resultLength++;\r\n        }\r\n        let result = new JSBI(resultLength, sign);\r\n        if (bitsShift === 0) {\r\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\r\n            result.__setDigit(resultLength - 1, 0);\r\n            for (let i = digitShift; i < length; i++) {\r\n                result.__setDigit(i - digitShift, x.__digit(i));\r\n            }\r\n        }\r\n        else {\r\n            let carry = x.__digit(digitShift) >>> bitsShift;\r\n            const last = length - digitShift - 1;\r\n            for (let i = 0; i < last; i++) {\r\n                const d = x.__digit(i + digitShift + 1);\r\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3fffffff) | carry);\r\n                carry = d >>> bitsShift;\r\n            }\r\n            result.__setDigit(last, carry);\r\n        }\r\n        if (mustRoundDown) {\r\n            // Since the result is negative, rounding down means adding one to its\r\n            // absolute value. This cannot overflow.\r\n            result = JSBI.__absoluteAddOne(result, true, result);\r\n        }\r\n        return result.__trim();\r\n    }\r\n    static __rightShiftByMaximum(sign) {\r\n        if (sign) {\r\n            return JSBI.__oneDigit(1, true);\r\n        }\r\n        return JSBI.__zero();\r\n    }\r\n    static __toShiftAmount(x) {\r\n        if (x.length > 1)\r\n            return -1;\r\n        const value = x.__unsignedDigit(0);\r\n        if (value > JSBI.__kMaxLengthBits)\r\n            return -1;\r\n        return value;\r\n    }\r\n    static __toPrimitive(obj, hint = 'default') {\r\n        if (typeof obj !== 'object')\r\n            return obj;\r\n        if (obj.constructor === JSBI)\r\n            return obj;\r\n        if (typeof Symbol !== 'undefined' &&\r\n            typeof Symbol.toPrimitive === 'symbol') {\r\n            const exoticToPrim = obj[Symbol.toPrimitive];\r\n            if (exoticToPrim) {\r\n                const primitive = exoticToPrim(hint);\r\n                if (typeof primitive !== 'object')\r\n                    return primitive;\r\n                throw new TypeError('Cannot convert object to primitive value');\r\n            }\r\n        }\r\n        const valueOf = obj.valueOf;\r\n        if (valueOf) {\r\n            const primitive = valueOf.call(obj);\r\n            if (typeof primitive !== 'object')\r\n                return primitive;\r\n        }\r\n        const toString = obj.toString;\r\n        if (toString) {\r\n            const primitive = toString.call(obj);\r\n            if (typeof primitive !== 'object')\r\n                return primitive;\r\n        }\r\n        throw new TypeError('Cannot convert object to primitive value');\r\n    }\r\n    static __toNumeric(value) {\r\n        if (JSBI.__isBigInt(value))\r\n            return value;\r\n        return +value;\r\n    }\r\n    static __isBigInt(value) {\r\n        return (typeof value === 'object' && value !== null && value.constructor === JSBI);\r\n    }\r\n    static __truncateToNBits(n, x) {\r\n        const neededDigits = ((n + 29) / 30) | 0;\r\n        const result = new JSBI(neededDigits, x.sign);\r\n        const last = neededDigits - 1;\r\n        for (let i = 0; i < last; i++) {\r\n            result.__setDigit(i, x.__digit(i));\r\n        }\r\n        let msd = x.__digit(last);\r\n        if (n % 30 !== 0) {\r\n            const drop = 32 - (n % 30);\r\n            msd = (msd << drop) >>> drop;\r\n        }\r\n        result.__setDigit(last, msd);\r\n        return result.__trim();\r\n    }\r\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\r\n        const neededDigits = ((n + 29) / 30) | 0;\r\n        const result = new JSBI(neededDigits, resultSign);\r\n        let i = 0;\r\n        const last = neededDigits - 1;\r\n        let borrow = 0;\r\n        const limit = Math.min(last, x.length);\r\n        for (; i < limit; i++) {\r\n            const r = 0 - x.__digit(i) - borrow;\r\n            borrow = (r >>> 30) & 1;\r\n            result.__setDigit(i, r & 0x3fffffff);\r\n        }\r\n        for (; i < last; i++) {\r\n            result.__setDigit(i, (-borrow & 0x3fffffff) | 0);\r\n        }\r\n        let msd = last < x.length ? x.__digit(last) : 0;\r\n        const msdBitsConsumed = n % 30;\r\n        let resultMsd;\r\n        if (msdBitsConsumed === 0) {\r\n            resultMsd = 0 - msd - borrow;\r\n            resultMsd &= 0x3fffffff;\r\n        }\r\n        else {\r\n            const drop = 32 - msdBitsConsumed;\r\n            msd = (msd << drop) >>> drop;\r\n            const minuendMsd = 1 << (32 - drop);\r\n            resultMsd = minuendMsd - msd - borrow;\r\n            resultMsd &= minuendMsd - 1;\r\n        }\r\n        result.__setDigit(last, resultMsd);\r\n        return result.__trim();\r\n    }\r\n    // Digit helpers.\r\n    __digit(i) {\r\n        return this[i];\r\n    }\r\n    __unsignedDigit(i) {\r\n        return this[i] >>> 0;\r\n    }\r\n    __setDigit(i, digit) {\r\n        this[i] = digit | 0;\r\n    }\r\n    __setDigitGrow(i, digit) {\r\n        this[i] = digit | 0;\r\n    }\r\n    __halfDigitLength() {\r\n        const len = this.length;\r\n        if (this.__unsignedDigit(len - 1) <= 0x7fff)\r\n            return len * 2 - 1;\r\n        return len * 2;\r\n    }\r\n    __halfDigit(i) {\r\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7fff;\r\n    }\r\n    __setHalfDigit(i, value) {\r\n        const digitIndex = i >>> 1;\r\n        const previous = this.__digit(digitIndex);\r\n        const updated = i & 1\r\n            ? (previous & 0x7fff) | (value << 15)\r\n            : (previous & 0x3fff8000) | (value & 0x7fff);\r\n        this.__setDigit(digitIndex, updated);\r\n    }\r\n    static __digitPow(base, exponent) {\r\n        let result = 1;\r\n        while (exponent > 0) {\r\n            if (exponent & 1)\r\n                result *= base;\r\n            exponent >>>= 1;\r\n            base *= base;\r\n        }\r\n        return result;\r\n    }\r\n    static __isOneDigitInt(x) {\r\n        // https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-numberbitwiseop\r\n        // https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toint32\r\n        // https://juejin.cn/post/6922902969029492743#comment\r\n        // js的位运算，会把不是number类型的转换成number类型，不是整数的浮点数，floor取整整数，并且只取int32部分运算\r\n        // 因此，下面的操作是说：if x不是小于2^32的整数，返回false\r\n        return (x & 0x3fffffff) === x;\r\n    }\r\n}\r\nJSBI.__kMaxLength = 1 << 25; // 相当于2的25次方\r\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5; // 相当于2的30次方\r\n// Lookup table for the maximum number of bits required per character of a\r\n// base-N string representation of a number. To increase accuracy, the array\r\n// value is the actual value multiplied by 32. To generate this table:\r\n//\r\n// for (let i = 0; i <= 36; i++) {\r\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\r\n// }\r\nJSBI.__kMaxBitsPerChar = [\r\n    0,\r\n    0,\r\n    32,\r\n    51,\r\n    64,\r\n    75,\r\n    83,\r\n    90,\r\n    96,\r\n    102,\r\n    107,\r\n    111,\r\n    115,\r\n    119,\r\n    122,\r\n    126,\r\n    128,\r\n    131,\r\n    134,\r\n    136,\r\n    139,\r\n    141,\r\n    143,\r\n    145,\r\n    147,\r\n    149,\r\n    151,\r\n    153,\r\n    154,\r\n    156,\r\n    158,\r\n    159,\r\n    160,\r\n    162,\r\n    163,\r\n    165,\r\n    166, // 33..36\r\n];\r\nJSBI.__kBitsPerCharTableShift = 5;\r\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\r\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\r\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\r\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\r\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\r\n// For IE11 compatibility.\r\n// Note that the custom replacements are tailored for JSBI's needs, and as\r\n// such are not reusable as general-purpose polyfills.\r\nJSBI.__clz30 = Math.clz32\r\n    ? function (x) {\r\n        return Math.clz32(x) - 2;\r\n    }\r\n    : function (x) {\r\n        if (x === 0)\r\n            return 30;\r\n        return (29 - ((Math.log(x >>> 0) / Math.LN2) | 0)) | 0;\r\n    };\r\nJSBI.__imul = Math.imul ||\r\n    function (a, b) {\r\n        return (a * b) | 0;\r\n    };\r\nexport default JSBI;\r\n//# sourceMappingURL=jsbi.js.map"],"names":["JSBI","length","sign","Object","setPrototypeOf","prototype","__kMaxLength","RangeError","result","digit","push","toString","join","radix","__toStringBasePowerOfTwo","__toStringGeneric","Error","i","newLength","last","pop","__clz30","__digit","multiplier","summand","mLow","mHigh","carry","high","d","dLow","dHigh","pLow","__imul","pMid1","pMid2","pHigh","__setDigit","startIndex","halfDigits","sum","__halfDigit","__setHalfDigit","subtrahend","fullSteps","borrow","current","r0","sub","r15","subTop","shift","len","__unsignedDigit","value","digitIndex","previous","updated","arg","__zero","__isOneDigitInt","__oneDigit","Number","isFinite","Math","floor","__fromDouble","__fromString","SyntaxError","constructor","primitive","__toPrimitive","BigInt","TypeError","x","xLength","xMsd","msdLeadingZeros","xBitLength","Infinity","exponent","currentDigit","mantissaHigh","mantissaHighBitsUnset","mantissaLow","mantissaLowBitsUnset","rounding","__decideRounding","signBit","__kBitConversionInts","__kBitConversionDouble","__copy","__absoluteSubOne","__trim","__absoluteAddOne","y","unaryMinus","expValue","__kMaxLengthBits","neededDigits","__initializeDigits","msd","runningSquare","multiply","resultLength","__clzmsd","__multiplyAccumulate","__absoluteCompare","resultSign","divisor","quotient","__absoluteDivSmall","__absoluteDivLarge","remainderDigit","__absoluteModSmall","remainder","__absoluteAdd","__absoluteSub","__rightShiftByAbsolute","__leftShiftByAbsolute","__compareToBigInt","equal","__absoluteAnd","max","y1","__absoluteOr","__absoluteAndNot","__absoluteXor","n","neededLength","topDigit","compareDigit","hasBit","__truncateToNBits","__truncateAndSubFromPowerOfTwo","bitsInTopDigit","__toNumeric","__isBigInt","add","__compare","EQ","__equalToNumber","dataview","byteOffset","littleEndian","asIntN","DataViewGetBigUint64","h","l","getUint32","low","DataViewSetBigUint64","asUintN","d1","setUint32","mantissaBitsUnset","topUnconsumedBit","mask","rawExponent","digits","kHiddenBit","kMantissaHighTopBit","msdTopBit","remainingMantissaBits","c","string","cursor","charCodeAt","__isWhitespace","chars","bitsPerChar","__kMaxBitsPerChar","roundup","__kBitsPerCharTableMultiplier","bitsMin","__kBitsPerCharTableShift","limDigit","limAlpha","parts","partsBits","done","part","bits","__fillFromParts","charsSoFar","m","digitsSoFar","__inplaceMultiplyAdd","bitsInDigit","partBits","charMask","bitLength","charsRequired","Array","pos","availableBits","newDigit","__kConversionChars","consumedBits","isRecursiveCall","maxBitsPerChar","minBitsPerChar","secondHalfChars","conqueror","exponentiate","secondHalf","input","divisionResult","firstHalf","leftNegative","bothNegative","xSign","__unequalSign","__absoluteGreater","__absoluteLess","ySign","yAbs","abs","xDigit","__compareToDouble","yBitLength","compareMantissa","op","__comparisonResultToBool","__compareToNumber","r","inputLength","__setDigitGrow","yLength","numPairs","tmp","tmpLength","diff","multiplicand","accumulator","accumulatorIndex","m2Low","m2High","acc","m1","m1Low","m1High","rLow","rMid1","rMid2","rHigh","source","factor","rx","ry","upperHalf","lowerHalf","dividend","wantQuotient","wantRemainder","__halfDigitLength","n2","q","qhatv","__clz15","__specialLeftShift","u","vn1","halfDigitBuffer","j","qhat","ujn","rhat","vn2","ujn2","__internalMultiplyAdd","__inplaceSub","__inplaceAdd","__inplaceRightShift","addDigit","__toShiftAmount","digitShift","bitsShift","grow","__rightShiftByMaximum","mustRoundDown","roundingCanOverflow","obj","hint","Symbol","toPrimitive","exoticToPrim","valueOf","call","drop","limit","min","msdBitsConsumed","resultMsd","minuendMsd","base","split","ArrayBuffer","Float64Array","__kBitConversionBuffer","Int32Array","clz32","log","LN2","imul","a","b"],"mappings":"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"}